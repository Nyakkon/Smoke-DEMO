const sql = require('mssql');

const config = {
    user: 'sa',
    password: '12345',
    server: 'localhost',
    database: 'SMOKEKING',
    options: {
        encrypt: false,
        trustServerCertificate: true
    }
};

async function checkTranHuyData() {
    try {
        await sql.connect(config);
        console.log('üîç Checking Tran Huy data...');

        const userId = 6; // Tran Huy's UserID

        // Check survey answers
        const surveyQuery = `
            SELECT usa.*, sq.QuestionText 
            FROM UserSurveyAnswers usa
            LEFT JOIN SurveyQuestions sq ON usa.QuestionID = sq.QuestionID
            WHERE usa.UserID = ${userId}
            ORDER BY usa.QuestionID
        `;
        const surveyResult = await sql.query(surveyQuery);
        console.log('üìã Survey answers for Tran Huy:', surveyResult.recordset);

        // Check quit plans
        const quitPlanQuery = `
            SELECT * FROM QuitPlans WHERE UserID = ${userId}
        `;
        const quitPlanResult = await sql.query(quitPlanQuery);
        console.log('üéØ Quit plans for Tran Huy:', quitPlanResult.recordset);

        // If no survey data, create some sample data
        if (surveyResult.recordset.length === 0) {
            console.log('üìù Creating sample survey data for Tran Huy...');

            // First, check what questions exist
            const questionsQuery = `SELECT * FROM SurveyQuestions ORDER BY QuestionID`;
            const questionsResult = await sql.query(questionsQuery);
            console.log('‚ùì Available questions:', questionsResult.recordset);

            if (questionsResult.recordset.length > 0) {
                // Create sample answers for first few questions
                const sampleAnswers = [
                    { questionId: 1, answer: '15 ƒëi·∫øu/ng√†y' },
                    { questionId: 2, answer: '5 nƒÉm' },
                    { questionId: 3, answer: 'V√¨ s·ª©c kh·ªèe' },
                    { questionId: 4, answer: '8/10' }
                ];

                for (const answer of sampleAnswers) {
                    const insertQuery = `
                        INSERT INTO UserSurveyAnswers (UserID, QuestionID, Answer, SubmittedAt)
                        VALUES (${userId}, ${answer.questionId}, '${answer.answer}', GETDATE())
                    `;
                    await sql.query(insertQuery);
                }
                console.log('‚úÖ Sample survey answers created');
            }
        }

        // If no quit plan, create one
        if (quitPlanResult.recordset.length === 0) {
            console.log('üìù Creating sample quit plan for Tran Huy...');

            const insertPlanQuery = `
                INSERT INTO QuitPlans (UserID, Reason, MotivationLevel, StartDate, TargetDate, Status, DetailedPlan, CreatedAt)
                VALUES (
                    ${userId}, 
                    'C·∫£i thi·ªán s·ª©c kh·ªèe v√† ti·∫øt ki·ªám ti·ªÅn',
                    8,
                    GETDATE(),
                    DATEADD(day, 30, GETDATE()),
                    'Active',
                    'K·∫ø ho·∫°ch cai thu·ªëc d·∫ßn d·∫ßn trong 30 ng√†y v·ªõi s·ª± h·ªó tr·ª£ c·ªßa gia ƒë√¨nh',
                    GETDATE()
                )
            `;
            await sql.query(insertPlanQuery);
            console.log('‚úÖ Sample quit plan created');
        }

        // Re-check data after creation
        const finalSurveyResult = await sql.query(surveyQuery);
        const finalQuitPlanResult = await sql.query(quitPlanQuery);

        console.log('üìä Final survey data:', finalSurveyResult.recordset.length, 'answers');
        console.log('üéØ Final quit plan data:', finalQuitPlanResult.recordset.length, 'plans');

    } catch (error) {
        console.error('‚ùå Error:', error);
    } finally {
        await sql.close();
    }
}

checkTranHuyData(); 