const sql = require('mssql');

const config = {
    server: 'localhost',
    database: 'SMOKEKING',
    user: 'sa',
    password: 'dinhcapro123',
    options: {
        encrypt: false,
        trustServerCertificate: true
    }
};

async function updateFeedbackSchema() {
    try {
        console.log('üîó Connecting to database...');
        await sql.connect(config);
        console.log('‚úÖ Connected to database');

        // Check if CoachFeedback table exists
        const checkTableResult = await sql.query(`
            SELECT COUNT(*) as TableExists 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'CoachFeedback'
        `);

        if (checkTableResult.recordset[0].TableExists === 0) {
            console.log('üìã Creating CoachFeedback table...');

            await sql.query(`
                -- Coach Feedback Table (Member ƒë√°nh gi√° Coach)
                CREATE TABLE CoachFeedback (
                    FeedbackID INT IDENTITY(1,1) PRIMARY KEY,
                    CoachID INT NOT NULL,
                    MemberID INT NOT NULL,
                    AppointmentID INT NULL, -- Li√™n k·∫øt v·ªõi bu·ªïi t∆∞ v·∫•n (n·∫øu c√≥)
                    Rating INT NOT NULL CHECK (Rating BETWEEN 1 AND 5), -- ƒê√°nh gi√° t·ª´ 1-5 sao
                    Comment NVARCHAR(MAX), -- Nh·∫≠n x√©t c·ªßa member
                    Categories NVARCHAR(MAX), -- JSON string ch·ª©a ƒë√°nh gi√° theo t·ª´ng ti√™u ch√≠
                    IsAnonymous BIT DEFAULT 0, -- C√≥ hi·ªÉn th·ªã t√™n member hay kh√¥ng
                    Status NVARCHAR(20) DEFAULT 'active' CHECK (Status IN ('active', 'hidden', 'deleted')),
                    CreatedAt DATETIME DEFAULT GETDATE(),
                    UpdatedAt DATETIME DEFAULT GETDATE(),

                    FOREIGN KEY (CoachID) REFERENCES Users(UserID),
                    FOREIGN KEY (MemberID) REFERENCES Users(UserID),
                    FOREIGN KEY (AppointmentID) REFERENCES ConsultationAppointments(AppointmentID),
                    UNIQUE(MemberID, CoachID, AppointmentID) -- M·ªói member ch·ªâ ƒë√°nh gi√° 1 l·∫ßn cho 1 coach trong 1 bu·ªïi
                );
            `);

            console.log('‚úÖ CoachFeedback table created');
        } else {
            console.log('‚úÖ CoachFeedback table already exists');
        }

        // Check if CoachRatingStats view exists
        const checkViewResult = await sql.query(`
            SELECT COUNT(*) as ViewExists 
            FROM INFORMATION_SCHEMA.VIEWS 
            WHERE TABLE_NAME = 'CoachRatingStats'
        `);

        if (checkViewResult.recordset[0].ViewExists === 0) {
            console.log('üìä Creating CoachRatingStats view...');

            await sql.query(`
                -- Coach Statistics View (ƒë·ªÉ t√≠nh to√°n th·ªëng k√™ ƒë√°nh gi√°)
                CREATE VIEW CoachRatingStats AS
                SELECT 
                    c.UserID as CoachID,
                    c.FirstName + ' ' + c.LastName as CoachName,
                    COUNT(cf.FeedbackID) as TotalReviews,
                    AVG(CAST(cf.Rating as FLOAT)) as AverageRating,
                    COUNT(CASE WHEN cf.Rating = 5 THEN 1 END) as FiveStarCount,
                    COUNT(CASE WHEN cf.Rating = 4 THEN 1 END) as FourStarCount,
                    COUNT(CASE WHEN cf.Rating = 3 THEN 1 END) as ThreeStarCount,
                    COUNT(CASE WHEN cf.Rating = 2 THEN 1 END) as TwoStarCount,
                    COUNT(CASE WHEN cf.Rating = 1 THEN 1 END) as OneStarCount
                FROM Users c
                LEFT JOIN CoachFeedback cf ON c.UserID = cf.CoachID AND cf.Status = 'active'
                WHERE c.Role = 'coach'
                GROUP BY c.UserID, c.FirstName, c.LastName;
            `);

            console.log('‚úÖ CoachRatingStats view created');
        } else {
            console.log('‚úÖ CoachRatingStats view already exists');
        }

        // Insert sample feedback data
        console.log('üìù Inserting sample feedback data...');

        const sampleDataResult = await sql.query(`
            SELECT COUNT(*) as FeedbackCount FROM CoachFeedback
        `);

        if (sampleDataResult.recordset[0].FeedbackCount === 0) {
            await sql.query(`
                -- Insert sample feedback data
                INSERT INTO CoachFeedback (CoachID, MemberID, AppointmentID, Rating, Comment, Categories, IsAnonymous)
                VALUES 
                (3, 2, NULL, 5, N'Coach Smith r·∫•t t·∫≠n t√¢m v√† ki√™n nh·∫´n. Nh·ªØng l·ªùi khuy√™n c·ªßa coach ƒë√£ gi√∫p em r·∫•t nhi·ªÅu trong vi·ªác cai thu·ªëc.', 
                 '{"professionalism": 5, "helpfulness": 5, "communication": 5, "knowledge": 4}', 0),
                (3, 4, NULL, 4, N'Coach c√≥ ki·∫øn th·ª©c chuy√™n m√¥n t·ªët, tuy nhi√™n em mong mu·ªën c√≥ th√™m th·ªùi gian t∆∞ v·∫•n.', 
                 '{"professionalism": 4, "helpfulness": 4, "communication": 4, "knowledge": 5}', 1);
            `);

            console.log('‚úÖ Sample feedback data inserted');
        } else {
            console.log('‚úÖ Sample feedback data already exists');
        }

        console.log('üéâ Database schema update completed successfully!');

    } catch (error) {
        console.error('‚ùå Error updating database schema:', error);
        throw error;
    } finally {
        await sql.close();
        console.log('üîå Database connection closed');
    }
}

async function main() {
    try {
        await updateFeedbackSchema();
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Script failed:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

module.exports = { updateFeedbackSchema }; 