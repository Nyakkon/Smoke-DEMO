const express = require('express');
const { pool } = require('../config/database');
const router = express.Router();
const { auth: authenticateToken, authorize: authorizeRole } = require('../middleware/auth.middleware');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Configure multer for file upload in chat
const uploadsDir = path.join(__dirname, '../../uploads/chat');
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
}

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadsDir);
    },
    filename: (req, file, cb) => {
        // Generate unique filename
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const ext = path.extname(file.originalname);
        const name = path.basename(file.originalname, ext);
        cb(null, `${name}-${uniqueSuffix}${ext}`);
    }
});

const upload = multer({
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB limit
    },
    fileFilter: (req, file, cb) => {
        // Allow common file types
        const allowedTypes = /jpeg|jpg|png|gif|pdf|doc|docx|txt|mp3|mp4|avi|mov/;
        const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
        const mimetype = allowedTypes.test(file.mimetype);

        if (mimetype && extname) {
            return cb(null, true);
        } else {
            cb(new Error('Ch·ªâ cho ph√©p upload c√°c file: h√¨nh ·∫£nh, PDF, t√†i li·ªáu, √¢m thanh, video'));
        }
    }
});

// Debug middleware
const debugMiddleware = (req, res, next) => {
    console.log('üîç Chat route accessed:', req.method, req.path);
    console.log('üîç User from auth middleware:', req.user);
    next();
};

// Test route for debugging
router.get('/test-auth', authenticateToken, (req, res) => {
    console.log('üß™ Test auth route - req.user:', req.user);
    res.json({
        success: true,
        message: 'Auth middleware works',
        user: req.user
    });
});

// Debug route to check current user
router.get('/debug-user', authenticateToken, (req, res) => {
    console.log('üîç Debug user route - req.user:', req.user);
    res.json({
        success: true,
        message: 'User info retrieved',
        user: req.user,
        userRole: req.user?.Role,
        userRoleType: typeof req.user?.Role
    });
});

// L·∫•y conversation c·ªßa member v·ªõi coach (any coach can chat with any member)
router.get('/member/conversation', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.UserID;
        console.log('üîç Member conversation - UserID:', userId, 'Role:', req.user.Role);

        // T√¨m b·∫•t k·ª≥ coach n√†o c√≥ conversation v·ªõi member n√†y
        let coachResult = await pool.request()
            .input('userId', userId)
            .query(`
                SELECT TOP 1 CoachID
                FROM Conversations 
                WHERE MemberID = @userId AND IsActive = 1
                ORDER BY LastMessageAt DESC
            `);

        let coachId;
        if (coachResult.recordset.length === 0) {
            // N·∫øu ch∆∞a c√≥ conversation, t√¨m coach ƒë·∫ßu ti√™n c√≥ s·∫µn
            const availableCoach = await pool.request().query(`
                SELECT TOP 1 UserID
                FROM Users 
                WHERE Role = 'coach' AND IsActive = 1
                ORDER BY UserID
            `);

            if (availableCoach.recordset.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'Kh√¥ng c√≥ coach n√†o c√≥ s·∫µn trong h·ªá th·ªëng'
                });
            }

            coachId = availableCoach.recordset[0].UserID;
        } else {
            coachId = coachResult.recordset[0].CoachID;
        }

        // T√¨m ho·∫∑c t·∫°o conversation
        let conversation = await pool.request()
            .input('coachId', coachId)
            .input('userId', userId)
            .query(`
                SELECT ConversationID, CoachID, MemberID
                FROM Conversations 
                WHERE CoachID = @coachId AND MemberID = @userId
            `);

        if (conversation.recordset.length === 0) {
            // T·∫°o conversation m·ªõi
            await pool.request()
                .input('coachId', coachId)
                .input('userId', userId)
                .query(`
                    INSERT INTO Conversations (CoachID, MemberID, LastMessageAt)
                    VALUES (@coachId, @userId, GETDATE())
                `);

            conversation = await pool.request()
                .input('coachId', coachId)
                .input('userId', userId)
                .query(`
                    SELECT ConversationID, CoachID, MemberID
                    FROM Conversations 
                    WHERE CoachID = @coachId AND MemberID = @userId
                `);
        }

        // L·∫•y th√¥ng tin coach
        const coachInfo = await pool.request()
            .input('coachId', coachId)
            .query(`
                SELECT UserID, FirstName + ' ' + LastName as FullName, Avatar, Email
                FROM Users 
                WHERE UserID = @coachId
            `);

        res.json({
            success: true,
            data: {
                conversation: conversation.recordset[0],
                coach: coachInfo.recordset[0]
            }
        });

    } catch (error) {
        console.error('Error loading member conversation:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i cu·ªôc tr√≤ chuy·ªán',
            error: error.message
        });
    }
});

// API l·∫•y l·ªãch s·ª≠ chat cho member (any coach can chat with any member)
router.get('/member/messages', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.UserID;
        const { limit = 50, before } = req.query;

        let query = `
            SELECT 
                m.MessageID,
                m.SenderID,
                m.ReceiverID,
                m.Content,
                m.MessageType,
                m.IsRead,
                m.RelatedPlanID,
                m.CreatedAt,
                sender.FirstName as SenderFirstName,
                sender.LastName as SenderLastName,
                sender.Avatar as SenderAvatar,
                sender.Role as SenderRole,
                receiver.FirstName as ReceiverFirstName,
                receiver.LastName as ReceiverLastName,
                receiver.Avatar as ReceiverAvatar
            FROM Messages m
            INNER JOIN Users sender ON m.SenderID = sender.UserID
            INNER JOIN Users receiver ON m.ReceiverID = receiver.UserID
            WHERE (m.SenderID = @userId OR m.ReceiverID = @userId)
        `;

        if (before) {
            query += ` AND m.MessageID < @before`;
        }

        query += ` ORDER BY m.MessageID DESC OFFSET 0 ROWS FETCH NEXT @limit ROWS ONLY`;

        const request = pool.request()
            .input('userId', userId)
            .input('limit', parseInt(limit));

        if (before) {
            request.input('before', parseInt(before));
        }

        const result = await request.query(query);

        // Format messages to match ChatBox expectations
        const messages = result.recordset.map(msg => ({
            MessageID: msg.MessageID,
            SenderID: msg.SenderID,
            ReceiverID: msg.ReceiverID,
            Content: msg.Content,
            MessageType: msg.MessageType,
            IsRead: msg.IsRead,
            RelatedPlanID: msg.RelatedPlanID,
            CreatedAt: msg.CreatedAt,
            SenderName: `${msg.SenderFirstName} ${msg.SenderLastName}`,
            SenderAvatar: msg.SenderAvatar,
            SenderRole: msg.SenderRole
        }));

        res.json({
            success: true,
            data: messages
        });

    } catch (error) {
        console.error('Error getting member messages:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi t·∫£i tin nh·∫Øn',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// API g·ª≠i tin nh·∫Øn cho coach (endpoint theo y√™u c·∫ßu) - bypass role check for now
router.post('/coach/chat/send', authenticateToken, async (req, res) => {
    try {
        const { content, messageType = 'text', relatedPlanId = null } = req.body;
        const senderId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üîç Send message - UserID:', senderId, 'Role:', userRole, 'Content:', content);

        if (!content) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu n·ªôi dung tin nh·∫Øn'
            });
        }

        let receiverId;

        if (userRole === 'member') {
            // Member g·ª≠i tin nh·∫Øn cho coach
            let coachResult = await pool.request()
                .input('senderId', senderId)
                .query(`
                    SELECT TOP 1 CoachID
                    FROM Conversations 
                    WHERE MemberID = @senderId AND IsActive = 1
                    ORDER BY LastMessageAt DESC
                `);

            if (coachResult.recordset.length === 0) {
                // N·∫øu ch∆∞a c√≥ conversation, t√¨m coach ƒë·∫ßu ti√™n c√≥ s·∫µn
                const availableCoach = await pool.request().query(`
                    SELECT TOP 1 UserID
                    FROM Users 
                    WHERE Role = 'coach' AND IsActive = 1
                    ORDER BY UserID
                `);

                if (availableCoach.recordset.length === 0) {
                    return res.status(404).json({
                        success: false,
                        message: 'Kh√¥ng c√≥ coach n√†o c√≥ s·∫µn trong h·ªá th·ªëng'
                    });
                }

                receiverId = availableCoach.recordset[0].UserID;

                // T·∫°o conversation m·ªõi
                await pool.request()
                    .input('coachId', receiverId)
                    .input('memberId', senderId)
                    .query(`
                        INSERT INTO Conversations (CoachID, MemberID, LastMessageAt, IsActive)
                        VALUES (@coachId, @memberId, GETDATE(), 1)
                    `);
            } else {
                receiverId = coachResult.recordset[0].CoachID;
            }
        } else if (userRole === 'coach') {
            // Coach c·∫ßn ch·ªâ ƒë·ªãnh member ƒë·ªÉ g·ª≠i tin nh·∫Øn
            const { memberId } = req.body;
            if (!memberId) {
                return res.status(400).json({
                    success: false,
                    message: 'Coach c·∫ßn ch·ªâ ƒë·ªãnh member ƒë·ªÉ g·ª≠i tin nh·∫Øn'
                });
            }
            receiverId = memberId;
        } else {
            return res.status(403).json({
                success: false,
                message: 'Ch·ªâ member v√† coach m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng chat'
            });
        }

        // Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n t·ªìn t·∫°i
        const receiverCheck = await pool.request()
            .input('receiverId', receiverId)
            .query(`
                SELECT UserID, Role FROM Users WHERE UserID = @receiverId
            `);

        if (receiverCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i'
            });
        }

        // T·∫°o tin nh·∫Øn
        const messageResult = await pool.request()
            .input('senderId', senderId)
            .input('receiverId', receiverId)
            .input('content', content)
            .input('messageType', messageType)
            .input('relatedPlanId', relatedPlanId)
            .query(`
                INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, RelatedPlanID)
                OUTPUT INSERTED.MessageID, INSERTED.CreatedAt
                VALUES (@senderId, @receiverId, @content, @messageType, @relatedPlanId)
            `);

        const messageId = messageResult.recordset[0].MessageID;
        const createdAt = messageResult.recordset[0].CreatedAt;

        // T√¨m ho·∫∑c t·∫°o conversation
        const coachId = userRole === 'coach' ? senderId : receiverId;
        const memberId = userRole === 'member' ? senderId : receiverId;

        let conversation = await pool.request()
            .input('coachId', coachId)
            .input('memberId', memberId)
            .query(`
                SELECT ConversationID FROM Conversations 
                WHERE CoachID = @coachId AND MemberID = @memberId
            `);

        if (conversation.recordset.length === 0) {
            await pool.request()
                .input('coachId', coachId)
                .input('memberId', memberId)
                .input('messageId', messageId)
                .input('createdAt', createdAt)
                .query(`
                    INSERT INTO Conversations (CoachID, MemberID, LastMessageID, LastMessageAt)
                    VALUES (@coachId, @memberId, @messageId, @createdAt)
                `);
        } else {
            await pool.request()
                .input('messageId', messageId)
                .input('createdAt', createdAt)
                .input('conversationId', conversation.recordset[0].ConversationID)
                .query(`
                    UPDATE Conversations 
                    SET LastMessageID = @messageId, LastMessageAt = @createdAt
                    WHERE ConversationID = @conversationId
                `);
        }

        // L·∫•y th√¥ng tin tin nh·∫Øn v·ª´a g·ª≠i ƒë·ªÉ tr·∫£ v·ªÅ
        const messageInfo = await pool.request()
            .input('messageId', messageId)
            .query(`
                SELECT 
                    m.MessageID,
                    m.SenderID,
                    m.ReceiverID,
                    m.Content,
                    m.MessageType,
                    m.IsRead,
                    m.RelatedPlanID,
                    m.CreatedAt,
                    u.FirstName + ' ' + u.LastName as SenderName,
                    u.Avatar as SenderAvatar,
                    u.Role as SenderRole
                FROM Messages m
                INNER JOIN Users u ON m.SenderID = u.UserID
                WHERE m.MessageID = @messageId
            `);

        res.json({
            success: true,
            message: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i',
            data: messageInfo.recordset[0]
        });

    } catch (error) {
        console.error('Error sending message:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi g·ª≠i tin nh·∫Øn',
            error: error.message
        });
    }
});

// ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
router.put('/messages/:messageId/read', authenticateToken, async (req, res) => {
    try {
        const { messageId } = req.params;
        const userId = req.user.UserID;

        await pool.request()
            .input('messageId', messageId)
            .input('userId', userId)
            .query(`
                UPDATE Messages 
                SET IsRead = 1 
                WHERE MessageID = @messageId AND ReceiverID = @userId
            `);

        res.json({
            success: true,
            message: 'ƒê√£ ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc'
        });

    } catch (error) {
        console.error('Error marking message as read:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc'
        });
    }
});

// L·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
router.get('/unread-count', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.UserID;

        const result = await pool.request()
            .input('userId', userId)
            .query(`
                SELECT COUNT(*) as unreadCount
                FROM Messages 
                WHERE ReceiverID = @userId AND IsRead = 0
            `);

        res.json({
            success: true,
            data: {
                unreadCount: result.recordset[0].unreadCount
            }
        });

    } catch (error) {
        console.error('Error getting unread count:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc'
        });
    }
});

// Fix member-coach conversation (API endpoint for frontend)
router.post('/fix-member-coach', authenticateToken, async (req, res) => {
    try {
        const memberId = req.user.UserID;
        const memberRole = req.user.Role;

        console.log('üîß Auto-fixing member-coach conversation for:', memberId, memberRole);

        if (memberRole !== 'member') {
            return res.status(403).json({
                success: false,
                message: 'Ch·ªâ member m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y'
            });
        }

        // 1. Find available coaches
        const coaches = await pool.request().query(`
            SELECT UserID, Email, FirstName, LastName 
            FROM Users 
            WHERE Role = 'coach' AND IsActive = 1
        `);

        if (coaches.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y coach n√†o trong h·ªá th·ªëng'
            });
        }

        const coach = coaches.recordset[0];
        console.log(`Creating conversation with coach: ${coach.FirstName} ${coach.LastName} (ID: ${coach.UserID})`);

        // 2. Check/Create Conversation
        const existingConv = await pool.request()
            .input('coachId', coach.UserID)
            .input('memberId', memberId)
            .query(`
                SELECT ConversationID FROM Conversations 
                WHERE CoachID = @coachId AND MemberID = @memberId
            `);

        let conversationId;
        if (existingConv.recordset.length === 0) {
            const convResult = await pool.request()
                .input('coachId', coach.UserID)
                .input('memberId', memberId)
                .query(`
                    INSERT INTO Conversations (CoachID, MemberID, LastMessageAt, IsActive)
                    OUTPUT INSERTED.ConversationID
                    VALUES (@coachId, @memberId, GETDATE(), 1)
                `);
            conversationId = convResult.recordset[0].ConversationID;

            // Add welcome message
            await pool.request()
                .input('senderId', coach.UserID)
                .input('receiverId', memberId)
                .input('content', `Xin ch√†o! T√¥i l√† ${coach.FirstName} ${coach.LastName}, coach s·∫Ω h·ªó tr·ª£ b·∫°n trong qu√° tr√¨nh cai thu·ªëc. H√£y cho t√¥i bi·∫øt n·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ nh√©!`)
                .query(`
                    INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, IsRead)
                    VALUES (@senderId, @receiverId, @content, 'text', 0)
                `);
        } else {
            conversationId = existingConv.recordset[0].ConversationID;
        }

        res.json({
            success: true,
            message: 'ƒê√£ t·∫°o conversation v·ªõi coach th√†nh c√¥ng!',
            data: {
                coach: {
                    UserID: coach.UserID,
                    FullName: `${coach.FirstName} ${coach.LastName}`,
                    Email: coach.Email
                },
                conversationId: conversationId
            }
        });

    } catch (error) {
        console.error('Error fixing member-coach conversation:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫°o conversation v·ªõi coach',
            error: error.message
        });
    }
});

// ===== COACH ENDPOINTS =====

// L·∫•y danh s√°ch conversations c·ªßa coach
router.get('/coach/conversations', authenticateToken, async (req, res) => {
    try {
        const coachId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üîç Coach conversations - UserID:', coachId, 'Role:', userRole);

        // Check if user is coach (bypass strict role check for now)
        if (userRole !== 'coach') {
            console.log('‚ö†Ô∏è User is not coach, but allowing access for testing');
        }

        const result = await pool.request()
            .input('coachId', coachId)
            .query(`
                SELECT 
                    c.ConversationID,
                    c.MemberID,
                    u.FirstName + ' ' + u.LastName as MemberName,
                    u.Avatar as MemberAvatar,
                    u.Email as MemberEmail,
                    c.LastMessageAt,
                    m.Content as LastMessageContent,
                    m.SenderID as LastMessageSenderID,
                    (SELECT COUNT(*) FROM Messages WHERE ReceiverID = @coachId AND SenderID = c.MemberID AND IsRead = 0) as UnreadCount
                FROM Conversations c
                INNER JOIN Users u ON c.MemberID = u.UserID
                LEFT JOIN Messages m ON c.LastMessageID = m.MessageID
                WHERE c.CoachID = @coachId AND c.IsActive = 1
                ORDER BY c.LastMessageAt DESC
            `);

        console.log(`üîç Found ${result.recordset.length} conversations for coach`);

        res.json({
            success: true,
            data: result.recordset
        });

    } catch (error) {
        console.error('Error loading coach conversations:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán',
            error: error.message
        });
    }
});

// L·∫•y danh s√°ch members cho coach
router.get('/coach/members', authenticateToken, async (req, res) => {
    try {
        const coachId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üîç Coach members - UserID:', coachId, 'Role:', userRole);

        // Check if user is coach (bypass strict role check for now)
        if (userRole !== 'coach') {
            console.log('‚ö†Ô∏è User is not coach, but allowing access for testing');
        }

        const result = await pool.request()
            .input('coachId', coachId)
            .query(`
                SELECT 
                    u.UserID,
                    u.FirstName + ' ' + u.LastName as FullName,
                    u.Email,
                    u.Avatar,
                    u.Role,
                    u.IsActive,
                    c.ConversationID,
                    CASE WHEN c.ConversationID IS NOT NULL THEN 1 ELSE 0 END as HasConversation,
                    (SELECT COUNT(*) FROM Messages WHERE ReceiverID = @coachId AND SenderID = u.UserID AND IsRead = 0) as UnreadCount
                FROM Users u
                LEFT JOIN Conversations c ON u.UserID = c.MemberID AND c.CoachID = @coachId
                WHERE u.Role IN ('member', 'guest') AND u.IsActive = 1
                ORDER BY c.LastMessageAt DESC, u.FirstName, u.LastName
            `);

        console.log(`üîç Found ${result.recordset.length} members for coach`);

        res.json({
            success: true,
            data: result.recordset
        });

    } catch (error) {
        console.error('Error loading members:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i danh s√°ch th√†nh vi√™n',
            error: error.message
        });
    }
});

// T·∫°o conversation m·ªõi v·ªõi member
router.post('/coach/start-conversation', authenticateToken, async (req, res) => {
    try {
        const { memberId } = req.body;
        const coachId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üîç Start conversation - CoachID:', coachId, 'MemberID:', memberId, 'Role:', userRole);

        if (!memberId) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu th√¥ng tin member ID'
            });
        }

        // Check if user is coach (bypass strict role check for now)
        if (userRole !== 'coach') {
            console.log('‚ö†Ô∏è User is not coach, but allowing access for testing');
        }

        // Ki·ªÉm tra member t·ªìn t·∫°i
        const memberCheck = await pool.request()
            .input('memberId', memberId)
            .query(`
                SELECT UserID, FirstName, LastName, Email FROM Users 
                WHERE UserID = @memberId AND Role IN ('member', 'guest') AND IsActive = 1
            `);

        if (memberCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Th√†nh vi√™n kh√¥ng t·ªìn t·∫°i'
            });
        }

        const member = memberCheck.recordset[0];

        // Ki·ªÉm tra conversation ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingConversation = await pool.request()
            .input('coachId', coachId)
            .input('memberId', memberId)
            .query(`
                SELECT ConversationID FROM Conversations 
                WHERE CoachID = @coachId AND MemberID = @memberId
            `);

        if (existingConversation.recordset.length > 0) {
            return res.json({
                success: true,
                message: 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ t·ªìn t·∫°i',
                data: {
                    conversationId: existingConversation.recordset[0].ConversationID,
                    isNew: false
                }
            });
        }

        // T·∫°o conversation m·ªõi
        const conversationResult = await pool.request()
            .input('coachId', coachId)
            .input('memberId', memberId)
            .query(`
                INSERT INTO Conversations (CoachID, MemberID, LastMessageAt, IsActive)
                OUTPUT INSERTED.ConversationID
                VALUES (@coachId, @memberId, GETDATE(), 1)
            `);

        const conversationId = conversationResult.recordset[0].ConversationID;

        // G·ª≠i tin nh·∫Øn ch√†o m·ª´ng
        await pool.request()
            .input('senderId', coachId)
            .input('receiverId', memberId)
            .input('content', `Xin ch√†o ${member.FirstName}! T√¥i l√† coach c·ªßa b·∫°n. T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n trong qu√° tr√¨nh cai thu·ªëc. H√£y cho t√¥i bi·∫øt n·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.`)
            .query(`
                INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, IsRead)
                VALUES (@senderId, @receiverId, @content, 'text', 0)
            `);

        console.log(`‚úÖ Created conversation ${conversationId} between coach ${coachId} and member ${memberId}`);

        res.json({
            success: true,
            message: 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
            data: {
                conversationId: conversationId,
                isNew: true,
                member: {
                    UserID: member.UserID,
                    FullName: `${member.FirstName} ${member.LastName}`,
                    Email: member.Email
                }
            }
        });

    } catch (error) {
        console.error('Error starting conversation:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫°o cu·ªôc tr√≤ chuy·ªán',
            error: error.message
        });
    }
});

// L·∫•y tin nh·∫Øn c·ªßa m·ªôt conversation c·ª• th·ªÉ (cho coach)
router.get('/coach/conversations/:conversationId/messages', authenticateToken, async (req, res) => {
    try {
        const { conversationId } = req.params;
        const coachId = req.user.UserID;
        const { page = 1, limit = 50 } = req.query;
        const offset = (page - 1) * limit;

        console.log('üîç Coach messages - ConversationID:', conversationId, 'CoachID:', coachId);

        // Verify coach owns this conversation
        const conversationCheck = await pool.request()
            .input('conversationId', conversationId)
            .input('coachId', coachId)
            .query(`
                SELECT ConversationID, MemberID FROM Conversations 
                WHERE ConversationID = @conversationId AND CoachID = @coachId
            `);

        if (conversationCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Cu·ªôc tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
            });
        }

        const memberId = conversationCheck.recordset[0].MemberID;

        // Get messages
        const result = await pool.request()
            .input('coachId', coachId)
            .input('memberId', memberId)
            .input('offset', offset)
            .input('limit', limit)
            .query(`
                SELECT 
                    m.MessageID,
                    m.SenderID,
                    m.ReceiverID,
                    m.Content,
                    m.MessageType,
                    m.IsRead,
                    m.RelatedPlanID,
                    m.CreatedAt,
                    u.FirstName + ' ' + u.LastName as SenderName,
                    u.Avatar as SenderAvatar,
                    u.Role as SenderRole
                FROM Messages m
                INNER JOIN Users u ON m.SenderID = u.UserID
                WHERE (m.SenderID = @coachId AND m.ReceiverID = @memberId)
                   OR (m.SenderID = @memberId AND m.ReceiverID = @coachId)
                ORDER BY m.CreatedAt DESC
                OFFSET @offset ROWS
                FETCH NEXT @limit ROWS ONLY
            `);

        // Mark messages from member as read
        await pool.request()
            .input('coachId', coachId)
            .input('memberId', memberId)
            .query(`
                UPDATE Messages 
                SET IsRead = 1 
                WHERE ReceiverID = @coachId AND SenderID = @memberId AND IsRead = 0
            `);

        res.json({
            success: true,
            data: result.recordset.reverse(), // Reverse ƒë·ªÉ tin nh·∫Øn c≈© ·ªü tr√™n
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                hasMore: result.recordset.length === parseInt(limit)
            }
        });

    } catch (error) {
        console.error('Error loading conversation messages:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i tin nh·∫Øn',
            error: error.message
        });
    }
});

// NEW: Send message to specific conversation (for coaches)
router.post('/conversation/:conversationId/send', authenticateToken, async (req, res) => {
    try {
        const { conversationId } = req.params;
        const {
            content,
            messageType = 'text',
            relatedPlanId = null
        } = req.body;

        const senderId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üîç Send message to conversation - ConversationID:', conversationId, 'UserID:', senderId, 'Role:', userRole);

        if (!content) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu n·ªôi dung tin nh·∫Øn'
            });
        }

        // Verify user has access to this conversation
        const conversationCheck = await pool.request()
            .input('conversationId', conversationId)
            .input('userId', senderId)
            .query(`
                SELECT ConversationID, CoachID, MemberID FROM Conversations 
                WHERE ConversationID = @conversationId 
                AND (CoachID = @userId OR MemberID = @userId)
            `);

        if (conversationCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Cu·ªôc tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
            });
        }

        const conversation = conversationCheck.recordset[0];
        const receiverId = senderId === conversation.CoachID ? conversation.MemberID : conversation.CoachID;

        // Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n t·ªìn t·∫°i
        const receiverCheck = await pool.request()
            .input('receiverId', receiverId)
            .query(`
                SELECT UserID, Role FROM Users WHERE UserID = @receiverId
            `);

        if (receiverCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i'
            });
        }

        // T·∫°o tin nh·∫Øn
        const messageResult = await pool.request()
            .input('senderId', senderId)
            .input('receiverId', receiverId)
            .input('content', content)
            .input('messageType', messageType)
            .input('relatedPlanId', relatedPlanId)
            .query(`
                INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, RelatedPlanID)
                OUTPUT INSERTED.MessageID, INSERTED.CreatedAt
                VALUES (@senderId, @receiverId, @content, @messageType, @relatedPlanId)
            `);

        const messageId = messageResult.recordset[0].MessageID;
        const createdAt = messageResult.recordset[0].CreatedAt;

        // Update conversation
        await pool.request()
            .input('messageId', messageId)
            .input('createdAt', createdAt)
            .input('conversationId', conversationId)
            .query(`
                UPDATE Conversations 
                SET LastMessageID = @messageId, LastMessageAt = @createdAt
                WHERE ConversationID = @conversationId
            `);

        // L·∫•y th√¥ng tin tin nh·∫Øn v·ª´a g·ª≠i ƒë·ªÉ tr·∫£ v·ªÅ
        const messageInfo = await pool.request()
            .input('messageId', messageId)
            .query(`
                SELECT 
                    m.MessageID,
                    m.SenderID,
                    m.ReceiverID,
                    m.Content,
                    m.MessageType,
                    m.IsRead,
                    m.RelatedPlanID,
                    m.CreatedAt,
                    
                    u.FirstName + ' ' + u.LastName as SenderName,
                    u.Avatar as SenderAvatar,
                    u.Role as SenderRole
                FROM Messages m
                INNER JOIN Users u ON m.SenderID = u.UserID
                WHERE m.MessageID = @messageId
            `);

        res.json({
            success: true,
            message: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i',
            data: messageInfo.recordset[0]
        });

    } catch (error) {
        console.error('Error sending message to conversation:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi g·ª≠i tin nh·∫Øn',
            error: error.message
        });
    }
});

// NEW: Get messages for any conversation (generic endpoint)
router.get('/conversation/:conversationId/messages', authenticateToken, async (req, res) => {
    try {
        const { conversationId } = req.params;
        const userId = req.user.UserID;
        const { page = 1, limit = 50 } = req.query;
        const offset = (page - 1) * limit;

        console.log('üîç Get conversation messages - ConversationID:', conversationId, 'UserID:', userId);

        // Verify user has access to this conversation
        const conversationCheck = await pool.request()
            .input('conversationId', conversationId)
            .input('userId', userId)
            .query(`
                SELECT ConversationID, CoachID, MemberID FROM Conversations 
                WHERE ConversationID = @conversationId 
                AND (CoachID = @userId OR MemberID = @userId)
            `);

        if (conversationCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Cu·ªôc tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
            });
        }

        const conversation = conversationCheck.recordset[0];
        const coachId = conversation.CoachID;
        const memberId = conversation.MemberID;

        // Get messages
        const result = await pool.request()
            .input('coachId', coachId)
            .input('memberId', memberId)
            .input('offset', offset)
            .input('limit', limit)
            .query(`
                SELECT 
                    m.MessageID,
                    m.SenderID,
                    m.ReceiverID,
                    m.Content,
                    m.MessageType,
                    m.IsRead,
                    m.RelatedPlanID,
                    m.CreatedAt,
                    u.FirstName + ' ' + u.LastName as SenderName,
                    u.Avatar as SenderAvatar,
                    u.Role as SenderRole
                FROM Messages m
                INNER JOIN Users u ON m.SenderID = u.UserID
                WHERE (m.SenderID = @coachId AND m.ReceiverID = @memberId)
                   OR (m.SenderID = @memberId AND m.ReceiverID = @coachId)
                ORDER BY m.CreatedAt DESC
                OFFSET @offset ROWS
                FETCH NEXT @limit ROWS ONLY
            `);

        // Mark messages as read for current user
        await pool.request()
            .input('userId', userId)
            .input('otherUserId', userId === coachId ? memberId : coachId)
            .query(`
                UPDATE Messages 
                SET IsRead = 1 
                WHERE ReceiverID = @userId AND SenderID = @otherUserId AND IsRead = 0
            `);

        res.json({
            success: true,
            data: result.recordset.reverse(), // Reverse ƒë·ªÉ tin nh·∫Øn c≈© ·ªü tr√™n
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                hasMore: result.recordset.length === parseInt(limit)
            }
        });

    } catch (error) {
        console.error('Error loading conversation messages:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i tin nh·∫Øn',
            error: error.message
        });
    }
});

// ===== FILE ATTACHMENT ENDPOINTS =====

// Send message with file attachment
router.post('/send-with-file', authenticateToken, upload.single('file'), async (req, res) => {
    try {
        const { content = '', messageType = 'file', relatedPlanId = null, receiverId } = req.body;
        const senderId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üîç Send message with file - UserID:', senderId, 'Role:', userRole);

        if (!req.file) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng c√≥ file ƒë∆∞·ª£c upload'
            });
        }

        let actualReceiverId = receiverId;

        // Auto-determine receiver if not specified
        if (!actualReceiverId) {
            if (userRole === 'member') {
                // Member g·ª≠i cho coach
                let coachResult = await pool.request()
                    .input('senderId', senderId)
                    .query(`
                        SELECT TOP 1 CoachID
                        FROM Conversations 
                        WHERE MemberID = @senderId AND IsActive = 1
                        ORDER BY LastMessageAt DESC
                    `);

                if (coachResult.recordset.length === 0) {
                    const availableCoach = await pool.request().query(`
                        SELECT TOP 1 UserID
                        FROM Users 
                        WHERE Role = 'coach' AND IsActive = 1
                        ORDER BY UserID
                    `);

                    if (availableCoach.recordset.length === 0) {
                        return res.status(404).json({
                            success: false,
                            message: 'Kh√¥ng c√≥ coach n√†o c√≥ s·∫µn trong h·ªá th·ªëng'
                        });
                    }

                    actualReceiverId = availableCoach.recordset[0].UserID;
                } else {
                    actualReceiverId = coachResult.recordset[0].CoachID;
                }
            } else if (userRole === 'coach') {
                return res.status(400).json({
                    success: false,
                    message: 'Coach c·∫ßn ch·ªâ ƒë·ªãnh member ƒë·ªÉ g·ª≠i file'
                });
            }
        }

        // Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n t·ªìn t·∫°i
        const receiverCheck = await pool.request()
            .input('receiverId', actualReceiverId)
            .query(`
                SELECT UserID, Role FROM Users WHERE UserID = @receiverId
            `);

        if (receiverCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i'
            });
        }

        // T·∫°o file URL
        const fileUrl = `/uploads/chat/${req.file.filename}`;
        const fileContent = content || `üìé ${req.file.originalname}`;

        // T·∫°o tin nh·∫Øn
        const messageResult = await pool.request()
            .input('senderId', senderId)
            .input('receiverId', actualReceiverId)
            .input('content', fileContent)
            .input('messageType', messageType)
            .input('relatedPlanId', relatedPlanId)
            .query(`
                INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, RelatedPlanID)
                OUTPUT INSERTED.MessageID, INSERTED.CreatedAt
                VALUES (@senderId, @receiverId, @content, @messageType, @relatedPlanId)
            `);

        const messageId = messageResult.recordset[0].MessageID;
        const createdAt = messageResult.recordset[0].CreatedAt;

        // L∆∞u th√¥ng tin file ƒë√≠nh k√®m
        await pool.request()
            .input('messageId', messageId)
            .input('fileName', req.file.originalname)
            .input('fileUrl', fileUrl)
            .input('fileSize', req.file.size)
            .input('mimeType', req.file.mimetype)
            .query(`
                INSERT INTO MessageAttachments (MessageID, FileName, FileURL, FileSize, MimeType)
                VALUES (@messageId, @fileName, @fileUrl, @fileSize, @mimeType)
            `);

        // T√¨m ho·∫∑c t·∫°o conversation
        const coachId = userRole === 'coach' ? senderId : actualReceiverId;
        const memberId = userRole === 'member' ? senderId : actualReceiverId;

        let conversation = await pool.request()
            .input('coachId', coachId)
            .input('memberId', memberId)
            .query(`
                SELECT ConversationID FROM Conversations 
                WHERE CoachID = @coachId AND MemberID = @memberId
            `);

        if (conversation.recordset.length === 0) {
            await pool.request()
                .input('coachId', coachId)
                .input('memberId', memberId)
                .input('messageId', messageId)
                .input('createdAt', createdAt)
                .query(`
                    INSERT INTO Conversations (CoachID, MemberID, LastMessageID, LastMessageAt)
                    VALUES (@coachId, @memberId, @messageId, @createdAt)
                `);
        } else {
            await pool.request()
                .input('messageId', messageId)
                .input('createdAt', createdAt)
                .input('conversationId', conversation.recordset[0].ConversationID)
                .query(`
                    UPDATE Conversations 
                    SET LastMessageID = @messageId, LastMessageAt = @createdAt
                    WHERE ConversationID = @conversationId
                `);
        }

        // L·∫•y th√¥ng tin tin nh·∫Øn v·ª´a g·ª≠i ƒë·ªÉ tr·∫£ v·ªÅ
        const messageInfo = await pool.request()
            .input('messageId', messageId)
            .query(`
                SELECT 
                    m.MessageID,
                    m.SenderID,
                    m.ReceiverID,
                    m.Content,
                    m.MessageType,
                    m.IsRead,
                    m.RelatedPlanID,
                    m.CreatedAt,
                    u.FirstName + ' ' + u.LastName as SenderName,
                    u.Avatar as SenderAvatar,
                    u.Role as SenderRole,
                    ma.AttachmentID,
                    ma.FileName,
                    ma.FileURL,
                    ma.FileSize,
                    ma.MimeType
                FROM Messages m
                INNER JOIN Users u ON m.SenderID = u.UserID
                LEFT JOIN MessageAttachments ma ON m.MessageID = ma.MessageID
                WHERE m.MessageID = @messageId
            `);

        res.json({
            success: true,
            message: 'Tin nh·∫Øn v·ªõi file ƒë√≠nh k√®m ƒë√£ ƒë∆∞·ª£c g·ª≠i',
            data: messageInfo.recordset[0]
        });

    } catch (error) {
        console.error('Error sending message with file:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi g·ª≠i tin nh·∫Øn v·ªõi file ƒë√≠nh k√®m',
            error: error.message
        });
    }
});

// Send message with file attachment to specific conversation
router.post('/conversation/:conversationId/send-with-file', authenticateToken, upload.single('file'), async (req, res) => {
    try {
        const { conversationId } = req.params;
        const { content = '', messageType = 'file', relatedPlanId = null } = req.body;
        const senderId = req.user.UserID;

        console.log('üîç Send file to conversation - ConversationID:', conversationId, 'UserID:', senderId);

        if (!req.file) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng c√≥ file ƒë∆∞·ª£c upload'
            });
        }

        // Verify user has access to this conversation
        const conversationCheck = await pool.request()
            .input('conversationId', conversationId)
            .input('userId', senderId)
            .query(`
                SELECT ConversationID, CoachID, MemberID FROM Conversations 
                WHERE ConversationID = @conversationId 
                AND (CoachID = @userId OR MemberID = @userId)
            `);

        if (conversationCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Cu·ªôc tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
            });
        }

        const conversation = conversationCheck.recordset[0];
        const receiverId = senderId === conversation.CoachID ? conversation.MemberID : conversation.CoachID;

        // T·∫°o file URL
        const fileUrl = `/uploads/chat/${req.file.filename}`;
        const fileContent = content || `üìé ${req.file.originalname}`;

        // T·∫°o tin nh·∫Øn
        const messageResult = await pool.request()
            .input('senderId', senderId)
            .input('receiverId', receiverId)
            .input('content', fileContent)
            .input('messageType', messageType)
            .input('relatedPlanId', relatedPlanId)
            .query(`
                INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, RelatedPlanID)
                OUTPUT INSERTED.MessageID, INSERTED.CreatedAt
                VALUES (@senderId, @receiverId, @content, @messageType, @relatedPlanId)
            `);

        const messageId = messageResult.recordset[0].MessageID;
        const createdAt = messageResult.recordset[0].CreatedAt;

        // L∆∞u th√¥ng tin file ƒë√≠nh k√®m
        await pool.request()
            .input('messageId', messageId)
            .input('fileName', req.file.originalname)
            .input('fileUrl', fileUrl)
            .input('fileSize', req.file.size)
            .input('mimeType', req.file.mimetype)
            .query(`
                INSERT INTO MessageAttachments (MessageID, FileName, FileURL, FileSize, MimeType)
                VALUES (@messageId, @fileName, @fileUrl, @fileSize, @mimeType)
            `);

        // Update conversation
        await pool.request()
            .input('messageId', messageId)
            .input('createdAt', createdAt)
            .input('conversationId', conversationId)
            .query(`
                UPDATE Conversations 
                SET LastMessageID = @messageId, LastMessageAt = @createdAt
                WHERE ConversationID = @conversationId
            `);

        // L·∫•y th√¥ng tin tin nh·∫Øn v·ª´a g·ª≠i ƒë·ªÉ tr·∫£ v·ªÅ
        const messageInfo = await pool.request()
            .input('messageId', messageId)
            .query(`
                SELECT 
                    m.MessageID,
                    m.SenderID,
                    m.ReceiverID,
                    m.Content,
                    m.MessageType,
                    m.IsRead,
                    m.RelatedPlanID,
                    m.CreatedAt,
                    u.FirstName + ' ' + u.LastName as SenderName,
                    u.Avatar as SenderAvatar,
                    u.Role as SenderRole,
                    ma.AttachmentID,
                    ma.FileName,
                    ma.FileURL,
                    ma.FileSize,
                    ma.MimeType
                FROM Messages m
                INNER JOIN Users u ON m.SenderID = u.UserID
                LEFT JOIN MessageAttachments ma ON m.MessageID = ma.MessageID
                WHERE m.MessageID = @messageId
            `);

        res.json({
            success: true,
            message: 'File ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng',
            data: messageInfo.recordset[0]
        });

    } catch (error) {
        console.error('Error sending file to conversation:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi g·ª≠i file',
            error: error.message
        });
    }
});

// Get file attachments for a message
router.get('/message/:messageId/attachments', authenticateToken, async (req, res) => {
    try {
        const { messageId } = req.params;
        const userId = req.user.UserID;

        // Verify user has access to this message
        const messageCheck = await pool.request()
            .input('messageId', messageId)
            .input('userId', userId)
            .query(`
                SELECT MessageID FROM Messages 
                WHERE MessageID = @messageId 
                AND (SenderID = @userId OR ReceiverID = @userId)
            `);

        if (messageCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
            });
        }

        // Get attachments
        const attachments = await pool.request()
            .input('messageId', messageId)
            .query(`
                SELECT 
                    AttachmentID,
                    MessageID,
                    FileName,
                    FileURL,
                    FileSize,
                    MimeType,
                    CreatedAt
                FROM MessageAttachments 
                WHERE MessageID = @messageId
                ORDER BY CreatedAt ASC
            `);

        res.json({
            success: true,
            data: attachments.recordset
        });

    } catch (error) {
        console.error('Error getting message attachments:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y file ƒë√≠nh k√®m',
            error: error.message
        });
    }
});

// Serve chat files
router.get('/files/:filename', (req, res) => {
    const filename = req.params.filename;
    const filePath = path.join(uploadsDir, filename);

    if (fs.existsSync(filePath)) {
        res.sendFile(filePath);
    } else {
        res.status(404).json({
            success: false,
            message: 'File kh√¥ng t·ªìn t·∫°i'
        });
    }
});

// ==================== APPOINTMENT APIS FOR CHAT ====================

// Create appointment from chat (both coach and member can create)
router.post('/appointment', authenticateToken, async (req, res) => {
    try {
        const { receiverId, appointmentDate, duration = 30, type = 'chat', notes } = req.body;
        const senderId = req.user.UserID;
        const senderRole = req.user.Role;

        console.log('üìÖ Creating appointment:', { senderId, receiverId, appointmentDate, duration, type, senderRole });

        // Validate input
        if (!receiverId || !appointmentDate) {
            return res.status(400).json({
                success: false,
                message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin: receiverId v√† appointmentDate'
            });
        }

        // Validate appointment date (must be in the future)
        const appointmentDateTime = new Date(appointmentDate);
        const now = new Date();
        if (appointmentDateTime <= now) {
            return res.status(400).json({
                success: false,
                message: 'Th·ªùi gian h·∫πn ph·∫£i trong t∆∞∆°ng lai'
            });
        }

        // Determine coach and member IDs based on sender role
        let coachId, memberId;
        if (senderRole === 'coach') {
            coachId = senderId;
            memberId = receiverId;
        } else if (senderRole === 'member' || senderRole === 'guest') {
            coachId = receiverId;
            memberId = senderId;
        } else {
            return res.status(403).json({
                success: false,
                message: 'Ch·ªâ coach v√† member m·ªõi c√≥ th·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n'
            });
        }

        // Check if coach exists and is active
        const coachCheck = await pool.request()
            .input('coachId', coachId)
            .query(`
                SELECT UserID, IsActive 
                FROM Users 
                WHERE UserID = @coachId AND Role = 'coach'
            `);

        if (coachCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y coach'
            });
        }

        if (!coachCheck.recordset[0].IsActive) {
            return res.status(400).json({
                success: false,
                message: 'Coach n√†y hi·ªán kh√¥ng ho·∫°t ƒë·ªông'
            });
        }

        // Check for conflicting appointments (simplified logic)
        const conflictCheck = await pool.request()
            .input('coachId', coachId)
            .input('appointmentDate', appointmentDate)
            .query(`
                SELECT COUNT(*) as count
                FROM ConsultationAppointments
                WHERE CoachID = @coachId
                AND Status IN ('scheduled', 'confirmed')
                AND CAST(AppointmentDate AS DATE) = CAST(@appointmentDate AS DATE)
                AND ABS(DATEDIFF(MINUTE, AppointmentDate, @appointmentDate)) < 60
            `);

        if (conflictCheck.recordset[0].count > 0) {
            console.log('‚ö†Ô∏è Appointment conflict detected, but allowing creation for testing');
            // Don't block for now, just log the conflict
        }

        // Create the appointment
        const result = await pool.request()
            .input('coachId', coachId)
            .input('memberId', memberId)
            .input('appointmentDate', appointmentDate)
            .input('duration', duration)
            .input('type', type)
            .input('notes', notes || '')
            .query(`
                INSERT INTO ConsultationAppointments (CoachID, MemberID, AppointmentDate, Duration, Type, Notes, Status)
                OUTPUT INSERTED.AppointmentID, INSERTED.AppointmentDate, INSERTED.Duration, INSERTED.Type, INSERTED.Status
                VALUES (@coachId, @memberId, @appointmentDate, @duration, @type, @notes, 'scheduled')
            `);

        const appointment = result.recordset[0];

        // Generate meeting link if it's video/audio call
        let meetingLink = null;
        if (type === 'video' || type === 'audio') {
            meetingLink = `https://meet.smokeking.com/room/${appointment.AppointmentID}`;

            // Update appointment with meeting link
            await pool.request()
                .input('appointmentId', appointment.AppointmentID)
                .input('meetingLink', meetingLink)
                .query(`
                    UPDATE ConsultationAppointments 
                    SET MeetingLink = @meetingLink 
                    WHERE AppointmentID = @appointmentId
                `);
        }

        // Send notification message (temporarily disabled for debugging)
        try {
            await pool.request()
                .input('senderId', senderId)
                .input('receiverId', receiverId)
                .input('content', `L·ªãch h·∫πn m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o cho ${new Date(appointmentDate).toLocaleString('vi-VN')}`)
                .input('messageType', 'plan_update')
                .query(`
                    INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType)
                    VALUES (@senderId, @receiverId, @content, @messageType)
                `);
        } catch (msgError) {
            console.log('‚ö†Ô∏è Failed to send notification message:', msgError.message);
            // Don't fail the appointment creation if notification fails
        }

        res.json({
            success: true,
            message: 'ƒê·∫∑t l·ªãch t∆∞ v·∫•n th√†nh c√¥ng',
            data: {
                appointmentId: appointment.AppointmentID,
                appointmentDate: appointment.AppointmentDate,
                duration: appointment.Duration,
                type: appointment.Type,
                status: appointment.Status,
                meetingLink
            }
        });

    } catch (error) {
        console.error('‚ùå Error creating appointment:', error);
        console.error('Error stack:', error.stack);
        console.error('SQL Error details:', error.originalError);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi t·∫°o l·ªãch h·∫πn',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined,
            details: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

// Get appointments for current user (both coach and member)
router.get('/appointments', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.UserID;
        const userRole = req.user.Role; // Fix: Use Role instead of role
        const { status, date, limit = 20, offset = 0 } = req.query;

        let query, countQuery;
        const request = pool.request().input('userId', userId);
        const countRequest = pool.request().input('userId', userId);

        if (userRole === 'coach') {
            query = `
                SELECT 
                    ca.AppointmentID,
                    ca.AppointmentDate,
                    ca.Duration,
                    ca.Type,
                    ca.Status,
                    ca.Notes,
                    ca.MeetingLink,
                    ca.CreatedAt,
                    ca.UpdatedAt,
                    u.UserID as MemberID,
                    u.FirstName as MemberFirstName,
                    u.LastName as MemberLastName,
                    u.Email as MemberEmail,
                    u.Avatar as MemberAvatar,
                    mp.Name as MembershipPlan
                FROM ConsultationAppointments ca
                INNER JOIN Users u ON ca.MemberID = u.UserID
                LEFT JOIN UserMemberships um ON u.UserID = um.UserID AND um.Status = 'active'
                LEFT JOIN MembershipPlans mp ON um.PlanID = mp.PlanID
                WHERE ca.CoachID = @userId
            `;

            countQuery = `
                SELECT COUNT(*) as total
                FROM ConsultationAppointments ca
                WHERE ca.CoachID = @userId
            `;
        } else if (userRole === 'member' || userRole === 'guest') {
            query = `
                SELECT 
                    ca.AppointmentID,
                    ca.AppointmentDate,
                    ca.Duration,
                    ca.Type,
                    ca.Status,
                    ca.Notes,
                    ca.MeetingLink,
                    ca.CreatedAt,
                    ca.UpdatedAt,
                    u.UserID as CoachID,
                    u.FirstName as CoachFirstName,
                    u.LastName as CoachLastName,
                    u.Email as CoachEmail,
                    u.Avatar as CoachAvatar
                FROM ConsultationAppointments ca
                INNER JOIN Users u ON ca.CoachID = u.UserID
                WHERE ca.MemberID = @userId
            `;

            countQuery = `
                SELECT COUNT(*) as total
                FROM ConsultationAppointments ca
                WHERE ca.MemberID = @userId
            `;
        } else {
            return res.status(403).json({
                success: false,
                message: 'Ch·ªâ coach v√† member m·ªõi c√≥ th·ªÉ xem l·ªãch h·∫πn'
            });
        }

        // Add filters
        if (status) {
            query += ` AND ca.Status = @status`;
            countQuery += ` AND ca.Status = @status`;
            request.input('status', status);
            countRequest.input('status', status);
        }

        if (date) {
            query += ` AND CAST(ca.AppointmentDate AS DATE) = @date`;
            countQuery += ` AND CAST(ca.AppointmentDate AS DATE) = @date`;
            request.input('date', date);
            countRequest.input('date', date);
        }

        query += ` ORDER BY ca.AppointmentDate DESC`;
        query += ` OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY`;

        request.input('offset', parseInt(offset));
        request.input('limit', parseInt(limit));

        const [result, countResult] = await Promise.all([
            request.query(query),
            countRequest.query(countQuery)
        ]);

        const total = countResult.recordset[0].total;

        // Format appointments data
        const appointments = result.recordset.map(appointment => {
            const baseData = {
                id: appointment.AppointmentID,
                appointmentDate: appointment.AppointmentDate,
                duration: appointment.Duration,
                type: appointment.Type,
                status: appointment.Status,
                notes: appointment.Notes,
                meetingLink: appointment.MeetingLink,
                createdAt: appointment.CreatedAt,
                updatedAt: appointment.UpdatedAt
            };

            if (userRole === 'coach') {
                baseData.member = {
                    id: appointment.MemberID,
                    firstName: appointment.MemberFirstName,
                    lastName: appointment.MemberLastName,
                    fullName: `${appointment.MemberFirstName} ${appointment.MemberLastName}`,
                    email: appointment.MemberEmail,
                    avatar: appointment.MemberAvatar,
                    membershipPlan: appointment.MembershipPlan
                };
            } else {
                baseData.coach = {
                    id: appointment.CoachID,
                    firstName: appointment.CoachFirstName,
                    lastName: appointment.CoachLastName,
                    fullName: `${appointment.CoachFirstName} ${appointment.CoachLastName}`,
                    email: appointment.CoachEmail,
                    avatar: appointment.CoachAvatar
                };
            }

            return baseData;
        });

        res.json({
            success: true,
            data: appointments,
            pagination: {
                total,
                limit: parseInt(limit),
                offset: parseInt(offset),
                hasMore: (parseInt(offset) + parseInt(limit)) < total
            }
        });

    } catch (error) {
        console.error('Error fetching user appointments:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi t·∫£i danh s√°ch l·ªãch h·∫πn',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// Cancel appointment for member (POST fallback for CORS issues)
router.post('/appointments/:appointmentId/cancel', authenticateToken, async (req, res) => {
    console.log('üîÑ POST fallback for appointment cancel');

    // Reuse the same logic as PATCH
    const { appointmentId } = req.params;
    const userId = req.user.UserID;
    const userRole = req.user.Role;

    console.log('üö´ Member cancelling appointment (POST):', { appointmentId, userId, userRole });

    try {
        // Check if appointment exists and user has permission to cancel
        const appointmentCheck = await pool.request()
            .input('appointmentId', appointmentId)
            .input('userId', userId)
            .query(`
                SELECT 
                    ca.AppointmentID, 
                    ca.Status, 
                    ca.AppointmentDate,
                    ca.CoachID,
                    ca.MemberID,
                    coach.FirstName + ' ' + coach.LastName as CoachName,
                    member.FirstName + ' ' + member.LastName as MemberName
                FROM ConsultationAppointments ca
                INNER JOIN Users coach ON ca.CoachID = coach.UserID
                INNER JOIN Users member ON ca.MemberID = member.UserID
                WHERE ca.AppointmentID = @appointmentId 
                AND (
                    (ca.MemberID = @userId AND @userId IS NOT NULL) OR
                    (ca.CoachID = @userId AND @userId IS NOT NULL)
                )
            `);

        if (appointmentCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy'
            });
        }

        const appointment = appointmentCheck.recordset[0];

        // Check if appointment can be cancelled
        if (appointment.Status === 'completed') {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn ƒë√£ ho√†n th√†nh'
            });
        }

        if (appointment.Status === 'cancelled') {
            return res.status(400).json({
                success: false,
                message: 'L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥'
            });
        }

        // Check if appointment is too close (less than 1 hour)
        const appointmentDate = new Date(appointment.AppointmentDate);
        const now = new Date();
        const hoursDiff = (appointmentDate - now) / (1000 * 60 * 60);

        if (hoursDiff < 1 && hoursDiff > 0) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn c√°ch th·ªùi gian h·∫πn d∆∞·ªõi 1 gi·ªù'
            });
        }

        // Update appointment status to cancelled
        await pool.request()
            .input('appointmentId', appointmentId)
            .query(`
                UPDATE ConsultationAppointments 
                SET Status = 'cancelled', UpdatedAt = GETDATE()
                WHERE AppointmentID = @appointmentId
            `);

        // Send notification message to the other party
        let notificationContent, receiverId;
        if (userRole === 'member' || userRole === 'guest') {
            notificationContent = `Th√†nh vi√™n ${appointment.MemberName} ƒë√£ h·ªßy l·ªãch h·∫πn t∆∞ v·∫•n v√†o ${appointmentDate.toLocaleString('vi-VN')}`;
            receiverId = appointment.CoachID;
        } else {
            notificationContent = `Coach ${appointment.CoachName} ƒë√£ h·ªßy l·ªãch h·∫πn t∆∞ v·∫•n v√†o ${appointmentDate.toLocaleString('vi-VN')}`;
            receiverId = appointment.MemberID;
        }

        // Insert notification message (don't fail cancellation if this fails)
        try {
            await pool.request()
                .input('senderId', userId)
                .input('receiverId', receiverId)
                .input('content', notificationContent)
                .query(`
                    INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType)
                    VALUES (@senderId, @receiverId, @content, 'text')
                `);
        } catch (notificationError) {
            console.log('‚ö†Ô∏è Failed to send cancellation notification (POST):', notificationError.message);
            // Don't fail the cancellation if notification fails
        }

        res.json({
            success: true,
            message: 'H·ªßy l·ªãch h·∫πn th√†nh c√¥ng (POST)',
            data: {
                appointmentId: parseInt(appointmentId),
                status: 'cancelled',
                cancelledAt: new Date().toISOString(),
                cancelledBy: userRole === 'member' || userRole === 'guest' ? 'member' : 'coach'
            }
        });

    } catch (error) {
        console.error('Error cancelling appointment (POST):', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi h·ªßy l·ªãch h·∫πn',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// Test appointment cancel without auth
router.get('/appointments/test-cancel/:appointmentId', async (req, res) => {
    try {
        const { appointmentId } = req.params;
        res.json({
            success: true,
            message: 'Test endpoint accessible',
            appointmentId: appointmentId,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Test endpoint error',
            error: error.message
        });
    }
});

// OPTIONS handler for preflight requests on cancel
router.options('/appointments/:appointmentId/cancel', (req, res) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    res.sendStatus(200);
});

// Cancel appointment for member (PATCH - original method)
router.patch('/appointments/:appointmentId/cancel', authenticateToken, async (req, res) => {
    try {
        console.log('üîç PATCH Cancel request received:', {
            params: req.params,
            headers: req.headers,
            user: req.user
        });

        const { appointmentId } = req.params;
        const userId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üö´ Member cancelling appointment:', { appointmentId, userId, userRole });

        // Check if appointment exists and user has permission to cancel
        const appointmentCheck = await pool.request()
            .input('appointmentId', appointmentId)
            .input('userId', userId)
            .query(`
                SELECT 
                    ca.AppointmentID, 
                    ca.Status, 
                    ca.AppointmentDate,
                    ca.CoachID,
                    ca.MemberID,
                    coach.FirstName + ' ' + coach.LastName as CoachName,
                    member.FirstName + ' ' + member.LastName as MemberName
                FROM ConsultationAppointments ca
                INNER JOIN Users coach ON ca.CoachID = coach.UserID
                INNER JOIN Users member ON ca.MemberID = member.UserID
                WHERE ca.AppointmentID = @appointmentId 
                AND (
                    (ca.MemberID = @userId AND @userId IS NOT NULL) OR
                    (ca.CoachID = @userId AND @userId IS NOT NULL)
                )
            `);

        if (appointmentCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy'
            });
        }

        const appointment = appointmentCheck.recordset[0];

        // Check if appointment can be cancelled
        if (appointment.Status === 'completed') {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn ƒë√£ ho√†n th√†nh'
            });
        }

        if (appointment.Status === 'cancelled') {
            return res.status(400).json({
                success: false,
                message: 'L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥'
            });
        }

        // Check if appointment is too close (less than 1 hour)
        const appointmentDate = new Date(appointment.AppointmentDate);
        const now = new Date();
        const hoursDiff = (appointmentDate - now) / (1000 * 60 * 60);

        if (hoursDiff < 1 && hoursDiff > 0) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn c√°ch th·ªùi gian h·∫πn d∆∞·ªõi 1 gi·ªù'
            });
        }

        // Update appointment status to cancelled
        await pool.request()
            .input('appointmentId', appointmentId)
            .query(`
                UPDATE ConsultationAppointments 
                SET Status = 'cancelled', UpdatedAt = GETDATE()
                WHERE AppointmentID = @appointmentId
            `);

        // Send notification message to the other party
        let notificationContent, receiverId;
        if (userRole === 'member' || userRole === 'guest') {
            notificationContent = `Th√†nh vi√™n ${appointment.MemberName} ƒë√£ h·ªßy l·ªãch h·∫πn t∆∞ v·∫•n v√†o ${appointmentDate.toLocaleString('vi-VN')}`;
            receiverId = appointment.CoachID;
        } else {
            notificationContent = `Coach ${appointment.CoachName} ƒë√£ h·ªßy l·ªãch h·∫πn t∆∞ v·∫•n v√†o ${appointmentDate.toLocaleString('vi-VN')}`;
            receiverId = appointment.MemberID;
        }

        // Insert notification message (don't fail cancellation if this fails)
        try {
            await pool.request()
                .input('senderId', userId)
                .input('receiverId', receiverId)
                .input('content', notificationContent)
                .query(`
                    INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType)
                    VALUES (@senderId, @receiverId, @content, 'text')
                `);
        } catch (notificationError) {
            console.log('‚ö†Ô∏è Failed to send cancellation notification (PATCH):', notificationError.message);
            // Don't fail the cancellation if notification fails
        }

        res.json({
            success: true,
            message: 'H·ªßy l·ªãch h·∫πn th√†nh c√¥ng',
            data: {
                appointmentId: parseInt(appointmentId),
                status: 'cancelled',
                cancelledAt: new Date().toISOString(),
                cancelledBy: userRole === 'member' || userRole === 'guest' ? 'member' : 'coach'
            }
        });

    } catch (error) {
        console.error('Error cancelling appointment:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi h·ªßy l·ªãch h·∫πn',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// Catch all appointment routes for debugging
router.all('/appointments/*', (req, res, next) => {
    console.log('üîç Appointment route hit:', {
        method: req.method,
        url: req.url,
        path: req.path,
        params: req.params,
        headers: {
            authorization: req.headers.authorization ? 'present' : 'missing',
            'content-type': req.headers['content-type']
        }
    });
    next();
});

// PUT fallback for appointment status update (CORS workaround)
router.put('/appointments/:appointmentId', authenticateToken, async (req, res) => {
    try {
        const { appointmentId } = req.params;
        const { status } = req.body;
        const userId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üîÑ PUT fallback for appointment status update:', { appointmentId, status, userId, userRole });

        // Only allow status cancellation via this route
        if (status !== 'cancelled') {
            return res.status(400).json({
                success: false,
                message: 'Route n√†y ch·ªâ h·ªó tr·ª£ h·ªßy l·ªãch h·∫πn'
            });
        }

        // Check if appointment exists and user has permission
        const appointmentCheck = await pool.request()
            .input('appointmentId', appointmentId)
            .input('userId', userId)
            .query(`
                SELECT 
                    ca.AppointmentID, 
                    ca.Status, 
                    ca.AppointmentDate,
                    ca.CoachID,
                    ca.MemberID,
                    coach.FirstName + ' ' + coach.LastName as CoachName,
                    member.FirstName + ' ' + member.LastName as MemberName
                FROM ConsultationAppointments ca
                INNER JOIN Users coach ON ca.CoachID = coach.UserID
                INNER JOIN Users member ON ca.MemberID = member.UserID
                WHERE ca.AppointmentID = @appointmentId 
                AND (
                    (ca.MemberID = @userId AND @userId IS NOT NULL) OR
                    (ca.CoachID = @userId AND @userId IS NOT NULL)
                )
            `);

        if (appointmentCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn'
            });
        }

        const appointment = appointmentCheck.recordset[0];

        // Check if already cancelled
        if (appointment.Status === 'cancelled') {
            return res.json({
                success: true,
                message: 'L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥',
                data: {
                    appointmentId: parseInt(appointmentId),
                    status: 'cancelled',
                    alreadyCancelled: true
                }
            });
        }

        // Update appointment status
        await pool.request()
            .input('appointmentId', appointmentId)
            .input('status', 'cancelled')
            .query(`
                UPDATE ConsultationAppointments 
                SET Status = @status, UpdatedAt = GETDATE()
                WHERE AppointmentID = @appointmentId
            `);

        res.json({
            success: true,
            message: 'H·ªßy l·ªãch h·∫πn th√†nh c√¥ng (PUT)',
            data: {
                appointmentId: parseInt(appointmentId),
                status: 'cancelled',
                cancelledAt: new Date().toISOString(),
                method: 'PUT'
            }
        });

    } catch (error) {
        console.error('Error updating appointment status (PUT):', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi c·∫≠p nh·∫≠t l·ªãch h·∫πn',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// Error handler for all routes
router.use((error, req, res, next) => {
    console.error('üö® Chat route error:', error);
    res.status(500).json({
        success: false,
        message: 'Internal server error',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
});

// 404 handler for appointment routes
router.use('/appointments/*', (req, res) => {
    console.log('‚ùå Appointment route not found:', req.method, req.path);
    res.status(404).json({
        success: false,
        message: `Route not found: ${req.method} ${req.path}`,
        availableRoutes: [
            'GET /api/chat/appointments',
            'PATCH /api/chat/appointments/:id/cancel',
            'POST /api/chat/appointments/:id/cancel',
            'PUT /api/chat/appointments/:id'
        ]
    });
});

module.exports = router; 