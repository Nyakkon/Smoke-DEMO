const express = require('express');
const sql = require('mssql');
const router = express.Router();
const { auth: authenticateToken, authorize: authorizeRole } = require('../middleware/auth.middleware');

// Debug middleware
const debugMiddleware = (req, res, next) => {
    console.log('üîç Chat route accessed:', req.method, req.path);
    console.log('üîç User from auth middleware:', req.user);
    next();
};

// Test route for debugging
router.get('/test-auth', authenticateToken, (req, res) => {
    console.log('üß™ Test auth route - req.user:', req.user);
    res.json({
        success: true,
        message: 'Auth middleware works',
        user: req.user
    });
});

// Test route for debugging authorization
router.get('/test-coach-auth', authenticateToken, authorizeRole(['coach']), (req, res) => {
    console.log('üß™ Test coach auth route - req.user:', req.user);
    res.json({
        success: true,
        message: 'Coach authorization works',
        user: req.user
    });
});

// L·∫•y danh s√°ch conversations c·ªßa coach
router.get('/coach/conversations', authenticateToken, debugMiddleware, authorizeRole(['coach']), async (req, res) => {
    try {
        console.log('üéØ Inside /coach/conversations handler');
        const coachId = req.user.UserID;

        const result = await sql.query`
            SELECT 
                c.ConversationID,
                c.MemberID,
                u.FirstName + ' ' + u.LastName as MemberName,
                u.Avatar as MemberAvatar,
                u.Email as MemberEmail,
                c.LastMessageAt,
                m.Content as LastMessageContent,
                m.SenderID as LastMessageSenderID,
                (SELECT COUNT(*) FROM Messages WHERE ReceiverID = ${coachId} AND SenderID = c.MemberID AND IsRead = 0) as UnreadCount
            FROM Conversations c
            INNER JOIN Users u ON c.MemberID = u.UserID
            LEFT JOIN Messages m ON c.LastMessageID = m.MessageID
            WHERE c.CoachID = ${coachId} AND c.IsActive = 1
            ORDER BY c.LastMessageAt DESC
        `;

        res.json({
            success: true,
            data: result.recordset
        });

    } catch (error) {
        console.error('Error loading coach conversations:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán'
        });
    }
});

// L·∫•y conversation c·ªßa member v·ªõi coach
router.get('/member/conversation', authenticateToken, authorizeRole(['member']), async (req, res) => {
    try {
        const memberId = req.user.UserID;

        // T√¨m coach ƒë∆∞·ª£c assign cho member n√†y (th√¥ng qua QuitPlans)
        const coachResult = await sql.query`
            SELECT TOP 1 CoachID
            FROM QuitPlans 
            WHERE UserID = ${memberId} AND CoachID IS NOT NULL AND Status = 'active'
            ORDER BY CreatedAt DESC
        `;

        if (coachResult.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'B·∫°n ch∆∞a ƒë∆∞·ª£c assign coach ho·∫∑c ch∆∞a c√≥ k·∫ø ho·∫°ch cai thu·ªëc active'
            });
        }

        const coachId = coachResult.recordset[0].CoachID;

        // T√¨m ho·∫∑c t·∫°o conversation
        let conversation = await sql.query`
            SELECT ConversationID, CoachID, MemberID
            FROM Conversations 
            WHERE CoachID = ${coachId} AND MemberID = ${memberId}
        `;

        if (conversation.recordset.length === 0) {
            // T·∫°o conversation m·ªõi
            await sql.query`
                INSERT INTO Conversations (CoachID, MemberID, LastMessageAt)
                VALUES (${coachId}, ${memberId}, GETDATE())
            `;

            conversation = await sql.query`
                SELECT ConversationID, CoachID, MemberID
                FROM Conversations 
                WHERE CoachID = ${coachId} AND MemberID = ${memberId}
            `;
        }

        // L·∫•y th√¥ng tin coach
        const coachInfo = await sql.query`
            SELECT UserID, FirstName + ' ' + LastName as FullName, Avatar, Email
            FROM Users 
            WHERE UserID = ${coachId}
        `;

        res.json({
            success: true,
            data: {
                conversation: conversation.recordset[0],
                coach: coachInfo.recordset[0]
            }
        });

    } catch (error) {
        console.error('Error loading member conversation:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i cu·ªôc tr√≤ chuy·ªán'
        });
    }
});

// L·∫•y tin nh·∫Øn trong conversation
router.get('/conversation/:conversationId/messages', authenticateToken, async (req, res) => {
    try {
        const { conversationId } = req.params;
        const userId = req.user.UserID;
        const { page = 1, limit = 50 } = req.query;
        const offset = (page - 1) * limit;

        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p conversation
        const conversationCheck = await sql.query`
            SELECT * FROM Conversations 
            WHERE ConversationID = ${conversationId} 
            AND (CoachID = ${userId} OR MemberID = ${userId})
        `;

        if (conversationCheck.recordset.length === 0) {
            return res.status(403).json({
                success: false,
                message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p cu·ªôc tr√≤ chuy·ªán n√†y'
            });
        }

        const result = await sql.query`
            SELECT 
                m.MessageID,
                m.SenderID,
                m.ReceiverID,
                m.Content,
                m.MessageType,
                m.IsRead,
                m.RelatedPlanID,
                m.CreatedAt,
                u.FirstName + ' ' + u.LastName as SenderName,
                u.Avatar as SenderAvatar,
                u.Role as SenderRole
            FROM Messages m
            INNER JOIN Users u ON m.SenderID = u.UserID
            WHERE (m.SenderID = ${conversationCheck.recordset[0].CoachID} AND m.ReceiverID = ${conversationCheck.recordset[0].MemberID})
               OR (m.SenderID = ${conversationCheck.recordset[0].MemberID} AND m.ReceiverID = ${conversationCheck.recordset[0].CoachID})
            ORDER BY m.CreatedAt DESC
            OFFSET ${offset} ROWS
            FETCH NEXT ${limit} ROWS ONLY
        `;

        // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
        await sql.query`
            UPDATE Messages 
            SET IsRead = 1 
            WHERE ReceiverID = ${userId} 
            AND ((SenderID = ${conversationCheck.recordset[0].CoachID} AND ReceiverID = ${conversationCheck.recordset[0].MemberID})
                OR (SenderID = ${conversationCheck.recordset[0].MemberID} AND ReceiverID = ${conversationCheck.recordset[0].CoachID}))
            AND IsRead = 0
        `;

        res.json({
            success: true,
            data: result.recordset.reverse(), // Reverse ƒë·ªÉ tin nh·∫Øn c≈© ·ªü tr√™n
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                hasMore: result.recordset.length === parseInt(limit)
            }
        });

    } catch (error) {
        console.error('Error loading messages:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i tin nh·∫Øn'
        });
    }
});

// G·ª≠i tin nh·∫Øn
router.post('/send', authenticateToken, async (req, res) => {
    try {
        const { receiverId, content, messageType = 'text', relatedPlanId = null } = req.body;
        const senderId = req.user.UserID;

        if (!receiverId || !content) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu th√¥ng tin ng∆∞·ªùi nh·∫≠n ho·∫∑c n·ªôi dung tin nh·∫Øn'
            });
        }

        // Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n t·ªìn t·∫°i
        const receiverCheck = await sql.query`
            SELECT UserID, Role FROM Users WHERE UserID = ${receiverId}
        `;

        if (receiverCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i'
            });
        }

        // Ki·ªÉm tra quy·ªÅn chat (coach ch·ªâ chat v·ªõi member c·ªßa m√¨nh, member ch·ªâ chat v·ªõi coach)
        const userRole = req.user.Role;
        const receiverRole = receiverCheck.recordset[0].Role;

        if (userRole === 'coach' && receiverRole !== 'member') {
            return res.status(403).json({
                success: false,
                message: 'Coach ch·ªâ c√≥ th·ªÉ chat v·ªõi member'
            });
        }

        if (userRole === 'member' && receiverRole !== 'coach') {
            return res.status(403).json({
                success: false,
                message: 'Member ch·ªâ c√≥ th·ªÉ chat v·ªõi coach'
            });
        }

        // N·∫øu l√† member g·ª≠i cho coach, ki·ªÉm tra xem coach c√≥ ƒë∆∞·ª£c assign kh√¥ng
        if (userRole === 'member') {
            const assignCheck = await sql.query`
                SELECT COUNT(*) as count
                FROM QuitPlans 
                WHERE UserID = ${senderId} AND CoachID = ${receiverId} AND Status = 'active'
            `;

            if (assignCheck.recordset[0].count === 0) {
                return res.status(403).json({
                    success: false,
                    message: 'B·∫°n ch·ªâ c√≥ th·ªÉ chat v·ªõi coach ƒë∆∞·ª£c assign cho b·∫°n'
                });
            }
        }

        // T·∫°o tin nh·∫Øn
        const messageResult = await sql.query`
            INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, RelatedPlanID)
            OUTPUT INSERTED.MessageID, INSERTED.CreatedAt
            VALUES (${senderId}, ${receiverId}, ${content}, ${messageType}, ${relatedPlanId})
        `;

        const messageId = messageResult.recordset[0].MessageID;
        const createdAt = messageResult.recordset[0].CreatedAt;

        // T√¨m ho·∫∑c t·∫°o conversation
        const coachId = userRole === 'coach' ? senderId : receiverId;
        const memberId = userRole === 'member' ? senderId : receiverId;

        let conversation = await sql.query`
            SELECT ConversationID FROM Conversations 
            WHERE CoachID = ${coachId} AND MemberID = ${memberId}
        `;

        if (conversation.recordset.length === 0) {
            await sql.query`
                INSERT INTO Conversations (CoachID, MemberID, LastMessageID, LastMessageAt)
                VALUES (${coachId}, ${memberId}, ${messageId}, ${createdAt})
            `;
        } else {
            await sql.query`
                UPDATE Conversations 
                SET LastMessageID = ${messageId}, LastMessageAt = ${createdAt}
                WHERE ConversationID = ${conversation.recordset[0].ConversationID}
            `;
        }

        // L·∫•y th√¥ng tin tin nh·∫Øn v·ª´a g·ª≠i ƒë·ªÉ tr·∫£ v·ªÅ
        const messageInfo = await sql.query`
            SELECT 
                m.MessageID,
                m.SenderID,
                m.ReceiverID,
                m.Content,
                m.MessageType,
                m.IsRead,
                m.RelatedPlanID,
                m.CreatedAt,
                u.FirstName + ' ' + u.LastName as SenderName,
                u.Avatar as SenderAvatar,
                u.Role as SenderRole
            FROM Messages m
            INNER JOIN Users u ON m.SenderID = u.UserID
            WHERE m.MessageID = ${messageId}
        `;

        res.json({
            success: true,
            message: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i',
            data: messageInfo.recordset[0]
        });

    } catch (error) {
        console.error('Error sending message:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi g·ª≠i tin nh·∫Øn'
        });
    }
});

// ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
router.put('/messages/:messageId/read', authenticateToken, async (req, res) => {
    try {
        const { messageId } = req.params;
        const userId = req.user.UserID;

        await sql.query`
            UPDATE Messages 
            SET IsRead = 1 
            WHERE MessageID = ${messageId} AND ReceiverID = ${userId}
        `;

        res.json({
            success: true,
            message: 'ƒê√£ ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc'
        });

    } catch (error) {
        console.error('Error marking message as read:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc'
        });
    }
});

// L·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
router.get('/unread-count', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.UserID;

        const result = await sql.query`
            SELECT COUNT(*) as unreadCount
            FROM Messages 
            WHERE ReceiverID = ${userId} AND IsRead = 0
        `;

        res.json({
            success: true,
            data: {
                unreadCount: result.recordset[0].unreadCount
            }
        });

    } catch (error) {
        console.error('Error getting unread count:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc'
        });
    }
});

// API cho coach c·∫≠p nh·∫≠t k·∫ø ho·∫°ch cai thu·ªëc c·ªßa member
router.put('/coach/member/:memberId/plan/:planId', authenticateToken, authorizeRole(['coach']), async (req, res) => {
    try {
        const { memberId, planId } = req.params;
        const { reason, detailedPlan, motivationLevel, targetDate } = req.body;
        const coachId = req.user.UserID;

        // Ki·ªÉm tra quy·ªÅn s·ª≠a k·∫ø ho·∫°ch
        const planCheck = await sql.query`
            SELECT * FROM QuitPlans 
            WHERE PlanID = ${planId} AND UserID = ${memberId} AND CoachID = ${coachId}
        `;

        if (planCheck.recordset.length === 0) {
            return res.status(403).json({
                success: false,
                message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a k·∫ø ho·∫°ch n√†y'
            });
        }

        // C·∫≠p nh·∫≠t k·∫ø ho·∫°ch
        await sql.query`
            UPDATE QuitPlans 
            SET Reason = ${reason},
                DetailedPlan = ${detailedPlan},
                MotivationLevel = ${motivationLevel},
                TargetDate = ${targetDate}
            WHERE PlanID = ${planId}
        `;

        // G·ª≠i tin nh·∫Øn th√¥ng b√°o v·ªÅ vi·ªác c·∫≠p nh·∫≠t k·∫ø ho·∫°ch
        const notificationContent = `Coach ƒë√£ c·∫≠p nh·∫≠t k·∫ø ho·∫°ch cai thu·ªëc c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫ø ho·∫°ch m·ªõi.`;

        await sql.query`
            INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, RelatedPlanID)
            VALUES (${coachId}, ${memberId}, ${notificationContent}, 'plan_update', ${planId})
        `;

        res.json({
            success: true,
            message: 'K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i'
        });

    } catch (error) {
        console.error('Error updating plan:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi c·∫≠p nh·∫≠t k·∫ø ho·∫°ch'
        });
    }
});

// L·∫•y danh s√°ch t·∫•t c·∫£ members cho coach ƒë·ªÉ t·∫°o conversation m·ªõi
router.get('/coach/members', authenticateToken, debugMiddleware, authorizeRole(['coach']), async (req, res) => {
    try {
        console.log('üéØ Inside /coach/members handler');
        const coachId = req.user.UserID;

        // L·∫•y t·∫•t c·∫£ members v√† check conversation status
        const result = await sql.query`
            SELECT 
                u.UserID,
                u.FirstName + ' ' + u.LastName as FullName,
                u.Email,
                u.Avatar,
                u.Role,
                u.IsActive,
                qp.PlanID,
                qp.Status as QuitPlanStatus,
                c.ConversationID,
                CASE WHEN c.ConversationID IS NOT NULL THEN 1 ELSE 0 END as HasConversation
            FROM Users u
            LEFT JOIN QuitPlans qp ON u.UserID = qp.UserID AND qp.Status = 'active' AND qp.CoachID = ${coachId}
            LEFT JOIN Conversations c ON u.UserID = c.MemberID AND c.CoachID = ${coachId}
            WHERE u.Role IN ('member', 'guest') AND u.IsActive = 1
            ORDER BY u.FirstName, u.LastName
        `;

        res.json({
            success: true,
            data: result.recordset
        });

    } catch (error) {
        console.error('Error loading members:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i danh s√°ch th√†nh vi√™n'
        });
    }
});

// T·∫°o conversation m·ªõi v·ªõi member
router.post('/coach/start-conversation', authenticateToken, authorizeRole(['coach']), async (req, res) => {
    try {
        const { memberId } = req.body;
        const coachId = req.user.UserID;

        if (!memberId) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu th√¥ng tin member ID'
            });
        }

        // Ki·ªÉm tra member t·ªìn t·∫°i
        const memberCheck = await sql.query`
            SELECT UserID, FirstName, LastName, Email FROM Users 
            WHERE UserID = ${memberId} AND Role IN ('member', 'guest') AND IsActive = 1
        `;

        if (memberCheck.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Th√†nh vi√™n kh√¥ng t·ªìn t·∫°i'
            });
        }

        const member = memberCheck.recordset[0];

        // Ki·ªÉm tra conversation ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingConversation = await sql.query`
            SELECT ConversationID FROM Conversations 
            WHERE CoachID = ${coachId} AND MemberID = ${memberId}
        `;

        if (existingConversation.recordset.length > 0) {
            return res.json({
                success: true,
                message: 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ t·ªìn t·∫°i',
                data: {
                    conversationId: existingConversation.recordset[0].ConversationID,
                    isNew: false
                }
            });
        }

        // T·∫°o conversation m·ªõi
        const conversationResult = await sql.query`
            INSERT INTO Conversations (CoachID, MemberID, LastMessageAt, IsActive)
            OUTPUT INSERTED.ConversationID
            VALUES (${coachId}, ${memberId}, GETDATE(), 1)
        `;

        const conversationId = conversationResult.recordset[0].ConversationID;

        // T·∫°o tin nh·∫Øn ch√†o h·ªèi t·ª´ coach
        const welcomeMessage = await sql.query`
            INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType, IsRead)
            OUTPUT INSERTED.MessageID, INSERTED.CreatedAt
            VALUES (
                ${coachId}, 
                ${memberId}, 
                N'Xin ch√†o ${member.FirstName}! T√¥i l√† coach c·ªßa b·∫°n. T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n trong h√†nh tr√¨nh cai thu·ªëc. B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªõi t√¥i v·ªÅ t√¨nh tr·∫°ng hi·ªán t·∫°i c·ªßa b·∫°n kh√¥ng?', 
                'text', 
                0
            )
        `;

        // C·∫≠p nh·∫≠t conversation v·ªõi tin nh·∫Øn ƒë·∫ßu ti√™n
        await sql.query`
            UPDATE Conversations 
            SET LastMessageID = ${welcomeMessage.recordset[0].MessageID},
                LastMessageAt = ${welcomeMessage.recordset[0].CreatedAt}
            WHERE ConversationID = ${conversationId}
        `;

        // T·∫°o quit plan n·∫øu ch∆∞a c√≥
        const existingPlan = await sql.query`
            SELECT PlanID FROM QuitPlans 
            WHERE UserID = ${memberId} AND Status = 'active'
        `;

        if (existingPlan.recordset.length === 0) {
            const startDate = new Date();
            const targetDate = new Date();
            targetDate.setDate(startDate.getDate() + 90); // 90 days plan

            await sql.query`
                INSERT INTO QuitPlans (UserID, CoachID, StartDate, TargetDate, Reason, MotivationLevel, DetailedPlan, Status)
                VALUES (
                    ${memberId}, 
                    ${coachId}, 
                    ${startDate}, 
                    ${targetDate},
                    N'C·∫£i thi·ªán s·ª©c kh·ªèe v√† ch·∫•t l∆∞·ª£ng cu·ªôc s·ªëng',
                    8,
                    N'K·∫ø ho·∫°ch cai thu·ªëc 90 ng√†y v·ªõi s·ª± h·ªó tr·ª£ t·ª´ coach chuy√™n nghi·ªáp',
                    'active'
                )
            `;
        } else {
            // Assign coach to existing plan if not assigned
            await sql.query`
                UPDATE QuitPlans 
                SET CoachID = ${coachId}
                WHERE UserID = ${memberId} AND Status = 'active' AND CoachID IS NULL
            `;
        }

        res.json({
            success: true,
            message: 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
            data: {
                conversationId: conversationId,
                memberName: `${member.FirstName} ${member.LastName}`,
                memberEmail: member.Email,
                isNew: true
            }
        });

    } catch (error) {
        console.error('Error creating conversation:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫°o cu·ªôc tr√≤ chuy·ªán'
        });
    }
});

// API ƒë·∫∑t l·ªãch t∆∞ v·∫•n
router.post('/appointment', authenticateToken, async (req, res) => {
    try {
        const { receiverId, appointmentDate, duration = 30, type = 'chat', notes } = req.body;
        const userId = req.user.UserID;
        const userRole = req.user.Role;

        if (!receiverId || !appointmentDate) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt'
            });
        }

        // X√°c ƒë·ªãnh coach v√† member
        let coachId, memberId;
        if (userRole === 'coach') {
            coachId = userId;
            memberId = receiverId;
        } else {
            coachId = receiverId;
            memberId = userId;
        }

        // T·∫°o cu·ªôc h·∫πn
        const result = await sql.query`
            INSERT INTO ConsultationAppointments (CoachID, MemberID, AppointmentDate, Duration, Type, Notes)
            OUTPUT INSERTED.AppointmentID
            VALUES (${coachId}, ${memberId}, ${appointmentDate}, ${duration}, ${type}, ${notes})
        `;

        const appointmentId = result.recordset[0].AppointmentID;

        // G·ª≠i tin nh·∫Øn th√¥ng b√°o
        const notificationContent = `${userRole === 'coach' ? 'Coach' : 'Member'} ƒë√£ ƒë·∫∑t l·ªãch t∆∞ v·∫•n ${type} v√†o ${new Date(appointmentDate).toLocaleString('vi-VN')}`;

        await sql.query`
            INSERT INTO Messages (SenderID, ReceiverID, Content, MessageType)
            VALUES (${userId}, ${receiverId}, ${notificationContent}, 'text')
        `;

        res.json({
            success: true,
            message: 'L·ªãch t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t',
            data: { appointmentId }
        });

    } catch (error) {
        console.error('Error creating appointment:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi ƒë·∫∑t l·ªãch t∆∞ v·∫•n'
        });
    }
});

// API l·∫•y danh s√°ch l·ªãch t∆∞ v·∫•n
router.get('/appointments', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.UserID;
        const userRole = req.user.Role;

        let query;
        if (userRole === 'coach') {
            query = sql.query`
                SELECT 
                    a.*,
                    u.FirstName + ' ' + u.LastName as MemberName,
                    u.Avatar as MemberAvatar
                FROM ConsultationAppointments a
                INNER JOIN Users u ON a.MemberID = u.UserID
                WHERE a.CoachID = ${userId}
                ORDER BY a.AppointmentDate DESC
            `;
        } else {
            query = sql.query`
                SELECT 
                    a.*,
                    u.FirstName + ' ' + u.LastName as CoachName,
                    u.Avatar as CoachAvatar
                FROM ConsultationAppointments a
                INNER JOIN Users u ON a.CoachID = u.UserID
                WHERE a.MemberID = ${userId}
                ORDER BY a.AppointmentDate DESC
            `;
        }

        const result = await query;

        res.json({
            success: true,
            data: result.recordset
        });

    } catch (error) {
        console.error('Error loading appointments:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫£i danh s√°ch l·ªãch t∆∞ v·∫•n'
        });
    }
});

module.exports = router; 