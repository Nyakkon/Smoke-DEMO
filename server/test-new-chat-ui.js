const axios = require('axios');

const BASE_URL = 'http://localhost:4000';

async function testNewChatUI() {
    console.log('üé® TESTING NEW CHAT UI...\n');

    try {
        // Test 1: Login as coach
        console.log('1. Testing coach login...');
        const coachLogin = await axios.post(`${BASE_URL}/api/auth/login`, {
            email: 'coach@example.com',
            password: 'H12345678@'
        });

        if (!coachLogin.data.success) {
            throw new Error('Coach login failed');
        }

        const coachToken = coachLogin.data.token;
        console.log('‚úÖ Coach login successful');

        // Test 2: Login as member
        console.log('\n2. Testing member login...');
        const memberLogin = await axios.post(`${BASE_URL}/api/auth/login`, {
            email: 'member@example.com',
            password: 'H12345678@'
        });

        if (!memberLogin.data.success) {
            throw new Error('Member login failed');
        }

        const memberToken = memberLogin.data.token;
        console.log('‚úÖ Member login successful');

        // Test 3: Create some test messages for UI testing
        console.log('\n3. Creating test messages for UI...');

        // Get or create conversation
        const coachConversations = await axios.get(
            `${BASE_URL}/api/chat/coach/conversations`,
            {
                headers: {
                    'Authorization': `Bearer ${coachToken}`
                }
            }
        );

        let conversationId;
        if (coachConversations.data.data.length === 0) {
            const createConv = await axios.post(
                `${BASE_URL}/api/chat/coach/start-conversation`,
                {
                    memberId: 2 // Member ID from schema
                },
                {
                    headers: {
                        'Authorization': `Bearer ${coachToken}`
                    }
                }
            );
            conversationId = createConv.data.data.conversationId;
        } else {
            conversationId = coachConversations.data.data[0].ConversationID;
        }

        // Create test messages to showcase the new UI
        const testMessages = [
            {
                sender: 'member',
                content: 'Ch√†o coach! Em m·ªõi b·∫Øt ƒë·∫ßu h√†nh tr√¨nh cai thu·ªëc v√† c·∫ßn s·ª± h·ªó tr·ª£ t·ª´ coach ·∫°.',
                token: memberToken
            },
            {
                sender: 'coach',
                content: 'Ch√†o b·∫°n! T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n trong h√†nh tr√¨nh cai thu·ªëc. B·∫°n ƒë√£ h√∫t thu·ªëc ƒë∆∞·ª£c bao l√¢u r·ªìi?',
                token: coachToken,
                conversationId: conversationId
            },
            {
                sender: 'member',
                content: 'Em h√∫t thu·ªëc ƒë∆∞·ª£c kho·∫£ng 5 nƒÉm r·ªìi ·∫°. M·ªói ng√†y kho·∫£ng 10-15 ƒëi·∫øu. Em th·∫•y kh√≥ khƒÉn nh·∫•t l√† khi stress ho·∫∑c sau b·ªØa ƒÉn.',
                token: memberToken
            },
            {
                sender: 'coach',
                content: 'T√¥i hi·ªÉu c·∫£m gi√°c c·ªßa b·∫°n. ƒê√¢y l√† nh·ªØng th·ªùi ƒëi·ªÉm "trigger" r·∫•t ph·ªï bi·∫øn. Ch√∫ng ta s·∫Ω c√πng nhau x√¢y d·ª±ng m·ªôt k·∫ø ho·∫°ch c·ª• th·ªÉ ƒë·ªÉ ƒë·ªëi ph√≥ v·ªõi nh·ªØng t√¨nh hu·ªëng n√†y nh√©! üí™',
                token: coachToken,
                conversationId: conversationId
            },
            {
                sender: 'member',
                content: 'C·∫£m ∆°n coach! Em c·∫£m th·∫•y c√≥ ƒë·ªông l·ª±c h∆°n r·ªìi. Coach c√≥ th·ªÉ chia s·∫ª m·ªôt s·ªë tips ƒë·ªÉ v∆∞·ª£t qua c∆°n th√®m thu·ªëc kh√¥ng ·∫°?',
                token: memberToken
            },
            {
                sender: 'coach',
                content: `T·∫•t nhi√™n! ƒê√¢y l√† m·ªôt s·ªë tips hi·ªáu qu·∫£:

1. üå¨Ô∏è Th·ªü s√¢u: H√≠t v√†o 4 gi√¢y, gi·ªØ 4 gi√¢y, th·ªü ra 6 gi√¢y
2. üíß U·ªëng n∆∞·ªõc l·∫°nh ngay l·∫≠p t·ª©c
3. üö∂‚Äç‚ôÇÔ∏è ƒêi b·ªô ho·∫∑c v·∫≠n ƒë·ªông nh·∫π 5-10 ph√∫t
4. üçé ƒÇn tr√°i c√¢y ho·∫∑c nhai k·∫πo cao su
5. üì± G·ªçi ƒëi·ªán cho b·∫°n b√® ho·∫∑c gia ƒë√¨nh

H√£y th·ª≠ v√† cho t√¥i bi·∫øt c√°ch n√†o hi·ªáu qu·∫£ nh·∫•t v·ªõi b·∫°n nh√©!`,
                token: coachToken,
                conversationId: conversationId
            }
        ];

        for (let i = 0; i < testMessages.length; i++) {
            const msg = testMessages[i];

            if (msg.sender === 'member') {
                await axios.post(
                    `${BASE_URL}/api/chat/coach/chat/send`,
                    {
                        content: msg.content
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${msg.token}`
                        }
                    }
                );
            } else {
                await axios.post(
                    `${BASE_URL}/api/chat/conversation/${msg.conversationId}/send`,
                    {
                        content: msg.content
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${msg.token}`
                        }
                    }
                );
            }

            // Small delay between messages
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        console.log('‚úÖ Test messages created successfully');

        console.log('\nüéâ NEW CHAT UI TEST COMPLETED!');
        console.log('\nüìã What\'s New:');
        console.log('‚ú® Messenger-style message bubbles');
        console.log('‚ú® Beautiful gradient backgrounds');
        console.log('‚ú® Smooth animations and hover effects');
        console.log('‚ú® Modern card design with rounded corners');
        console.log('‚ú® Online status indicators with pulse animation');
        console.log('‚ú® Improved typing indicators');
        console.log('‚ú® Message read status (‚úì‚úì)');
        console.log('‚ú® Enhanced modal design');
        console.log('‚ú® Better responsive design');

        console.log('\nüöÄ Frontend Testing:');
        console.log('1. Coach: http://localhost:3000/coach/dashboard');
        console.log('   - Login: coach@example.com / H12345678@');
        console.log('   - Go to Chat section to see the new UI');
        console.log('');
        console.log('2. Member: http://localhost:3000');
        console.log('   - Login: member@example.com / H12345678@');
        console.log('   - Go to Chat section to see the new UI');

        console.log('\nüí° UI Features to Test:');
        console.log('- Message bubbles with tails (like Messenger)');
        console.log('- Hover effects on messages and buttons');
        console.log('- Smooth send button animation when typing');
        console.log('- Beautiful appointment modal');
        console.log('- Online status pulse animation');
        console.log('- Gradient header with glassmorphism effects');

    } catch (error) {
        console.error('‚ùå Test failed:', error.response?.data || error.message);
        if (error.response?.status === 404) {
            console.log('\nüí° Tip: Make sure the server is running on port 4000');
        }
    }
}

testNewChatUI(); 