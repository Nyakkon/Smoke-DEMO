const axios = require('axios');

// Test member details endpoint
async function testMemberDetails() {
    const baseURL = 'http://localhost:3000/api';

    try {
        // First login as coach
        console.log('üîê Logging in as coach...');
        const loginResponse = await axios.post(`${baseURL}/coach/login`, {
            email: 'coach@example.com',
            password: 'password'
        });

        const authToken = loginResponse.data.token;
        console.log('‚úÖ Coach login successful');

        // Test headers with token
        const headers = {
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json'
        };

        // First get list of members to get a member ID
        console.log('\nüìã Getting members list...');
        const membersResponse = await axios.get(`${baseURL}/coach/members`, { headers });

        console.log(`‚úÖ Found ${membersResponse.data.total} members`);

        if (membersResponse.data.data.length > 0) {
            const firstMember = membersResponse.data.data[0];
            console.log(`üìù Testing with member: ${firstMember.fullName} (ID: ${firstMember.id})`);

            // Test member details endpoint
            console.log('\nüîç Getting member details...');
            const detailsResponse = await axios.get(`${baseURL}/coach/members/${firstMember.id}/details`, { headers });

            console.log('‚úÖ Member details retrieved successfully');
            console.log('\nüìä Member Details:');
            console.log('=====================================');

            const member = detailsResponse.data.data;

            // Basic info
            console.log(`üë§ T√™n: ${member.fullName}`);
            console.log(`üìß Email: ${member.email}`);
            console.log(`üì± Role: ${member.role}`);
            console.log(`üè† ƒê·ªãa ch·ªâ: ${member.address || 'Ch∆∞a c·∫≠p nh·∫≠t'}`);
            console.log(`‚òéÔ∏è S·ªë ƒëi·ªán tho·∫°i: ${member.phoneNumber || 'Ch∆∞a c·∫≠p nh·∫≠t'}`);

            // Membership info
            console.log('\nüíé Th√¥ng tin g√≥i:');
            if (member.membership) {
                console.log(`   üì¶ G√≥i: ${member.membership.planName}`);
                console.log(`   üí∞ Gi√°: ${member.membership.planPrice.toLocaleString()} VNƒê`);
                console.log(`   üìÖ B·∫Øt ƒë·∫ßu: ${new Date(member.membership.startDate).toLocaleDateString('vi-VN')}`);
                console.log(`   üìÖ K·∫øt th√∫c: ${new Date(member.membership.endDate).toLocaleDateString('vi-VN')}`);
                console.log(`   ‚è∞ C√≤n l·∫°i: ${member.membership.daysRemaining} ng√†y`);
                console.log(`   üéØ T√≠nh nƒÉng: ${member.membership.planFeatures.join(', ')}`);
            } else {
                console.log('   ‚ùå Ch∆∞a ƒëƒÉng k√Ω g√≥i n√†o');
            }

            // Quit smoking status - KEY FEATURE
            console.log('\nüö¨ Tr·∫°ng th√°i cai thu·ªëc:');
            console.log(`   üìà Tr·∫°ng th√°i: ${member.quitSmokingStatus.status.toUpperCase()}`);
            console.log(`   üìù M√¥ t·∫£: ${member.quitSmokingStatus.description}`);
            console.log(`   üí° Khuy·∫øn ngh·ªã: ${member.quitSmokingStatus.recommendation}`);

            if (member.quitSmokingStatus.metrics) {
                console.log(`   üìä Th·ªëng k√™ tu·∫ßn qua:`);
                console.log(`      - Trung b√¨nh ƒëi·∫øu/ng√†y: ${member.quitSmokingStatus.metrics.recentAvgCigarettes}`);
                console.log(`      - M·ª©c ƒë·ªô th√®m thu·ªëc: ${member.quitSmokingStatus.metrics.recentAvgCraving}/10`);
                console.log(`      - Ng√†y kh√¥ng h√∫t: ${member.quitSmokingStatus.metrics.daysSmokeFree}`);
                console.log(`      - T·ªïng ng√†y theo d√µi: ${member.quitSmokingStatus.metrics.totalProgressDays}`);
            }

            // Quit plan
            console.log('\nüìã K·∫ø ho·∫°ch cai thu·ªëc:');
            if (member.quitPlan) {
                console.log(`   üéØ Ng√†y b·∫Øt ƒë·∫ßu: ${new Date(member.quitPlan.startDate).toLocaleDateString('vi-VN')}`);
                console.log(`   üèÅ Ng√†y m·ª•c ti√™u: ${new Date(member.quitPlan.targetDate).toLocaleDateString('vi-VN')}`);
                console.log(`   üí™ M·ª©c ƒë·ªô ƒë·ªông l·ª±c: ${member.quitPlan.motivationLevel}/10`);
                console.log(`   üìù L√Ω do cai thu·ªëc: ${member.quitPlan.reason || 'Ch∆∞a nh·∫≠p'}`);
                console.log(`   üìÖ S·ªë ng√†y th·ª±c hi·ªán: ${member.quitPlan.daysInPlan}`);
            } else {
                console.log('   ‚ùå Ch∆∞a c√≥ k·∫ø ho·∫°ch cai thu·ªëc');
            }

            // Statistics
            console.log('\nüìà Th·ªëng k√™ t·ªïng quan:');
            console.log(`   üìä Ng√†y theo d√µi: ${member.statistics.totalDaysTracked}`);
            console.log(`   üö¨ TB ƒëi·∫øu/ng√†y: ${member.statistics.averageCigarettesPerDay}`);
            console.log(`   üò∞ TB m·ª©c th√®m: ${member.statistics.averageCravingLevel}/10`);
            console.log(`   üí∞ Ti·ªÅn ti·∫øt ki·ªám: ${member.statistics.totalMoneySaved.toLocaleString()} VNƒê`);
            console.log(`   üèÜ K·ª∑ l·ª•c kh√¥ng h√∫t: ${member.statistics.bestDaysSmokeFree} ng√†y`);
            console.log(`   üìà xu h∆∞·ªõng: ${member.statistics.progressTrend}`);

            // Achievements
            console.log('\nüèÜ Th√†nh t√≠ch:');
            console.log(`   üéñÔ∏è T·ªïng s·ªë: ${member.achievementCount} huy hi·ªáu`);
            if (member.achievements.length > 0) {
                member.achievements.slice(0, 3).forEach(achievement => {
                    console.log(`   - ${achievement.Name}: ${achievement.Description}`);
                });
                if (member.achievements.length > 3) {
                    console.log(`   ... v√† ${member.achievements.length - 3} huy hi·ªáu kh√°c`);
                }
            }

            // Recent progress
            console.log('\nüìÖ Ti·∫øn tr√¨nh g·∫ßn ƒë√¢y (7 ng√†y):');
            if (member.recentProgress.length > 0) {
                member.recentProgress.forEach(progress => {
                    const date = new Date(progress.Date).toLocaleDateString('vi-VN');
                    console.log(`   ${date}: ${progress.CigarettesSmoked || 0} ƒëi·∫øu, th√®m ${progress.CravingLevel || 0}/10`);
                });
            } else {
                console.log('   üìù Ch∆∞a c√≥ d·ªØ li·ªáu ti·∫øn tr√¨nh');
            }

            console.log('\n=====================================');
            console.log('‚úÖ Test member details completed successfully!');

        } else {
            console.log('‚ùå No members found to test');
        }

    } catch (error) {
        console.error('‚ùå Error testing member details:', error.response?.data || error.message);
    }
}

// Test v·ªõi member ID c·ª• th·ªÉ
async function testSpecificMember(memberId) {
    const baseURL = 'http://localhost:3000/api';

    try {
        // Login as coach
        const loginResponse = await axios.post(`${baseURL}/coach/login`, {
            email: 'coach@example.com',
            password: 'password'
        });

        const headers = {
            'Authorization': `Bearer ${loginResponse.data.token}`,
            'Content-Type': 'application/json'
        };

        console.log(`üîç Getting details for member ID: ${memberId}`);
        const detailsResponse = await axios.get(`${baseURL}/coach/members/${memberId}/details`, { headers });

        console.log('‚úÖ Success!');
        console.log(JSON.stringify(detailsResponse.data.data, null, 2));

    } catch (error) {
        console.error('‚ùå Error:', error.response?.data || error.message);
    }
}

// Run tests
if (require.main === module) {
    console.log('üß™ Testing Member Details API');
    console.log('============================\n');

    // Test with first available member
    testMemberDetails();

    // Uncomment to test with specific member ID
    // testSpecificMember(2);
}

module.exports = { testMemberDetails, testSpecificMember }; 