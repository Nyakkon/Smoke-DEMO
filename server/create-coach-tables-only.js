const sql = require('mssql');

async function createCoachTables() {
    try {
        console.log('üîÑ Connecting to database...');

        const config = {
            user: 'sa',
            password: '12345',
            server: 'localhost',
            database: 'SMOKEKING',
            options: {
                encrypt: false,
                trustServerCertificate: true,
                connectTimeout: 30000,
                requestTimeout: 30000
            }
        };

        await sql.connect(config);
        console.log('‚úÖ Connected to SMOKEKING database');

        // Check if tables exist first
        console.log('üîç Checking if CoachProfiles table exists...');
        const checkCoachProfiles = await sql.query(`
            SELECT COUNT(*) as count 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'CoachProfiles'
        `);

        if (checkCoachProfiles.recordset[0].count === 0) {
            console.log('üìã Creating CoachProfiles table...');
            await sql.query(`
                CREATE TABLE CoachProfiles (
                    ProfileID INT IDENTITY(1,1) PRIMARY KEY,
                    UserID INT NOT NULL,
                    Bio NVARCHAR(MAX),
                    Specialization NVARCHAR(255),
                    Experience INT,
                    HourlyRate DECIMAL(10,2),
                    IsAvailable BIT DEFAULT 1,
                    YearsOfExperience INT,
                    Education NVARCHAR(MAX),
                    Certifications NVARCHAR(MAX),
                    Languages NVARCHAR(255),
                    WorkingHours NVARCHAR(255),
                    ConsultationTypes NVARCHAR(255),
                    SuccessRate DECIMAL(5,2),
                    TotalClients INT DEFAULT 0,
                    CreatedAt DATETIME DEFAULT GETDATE(),
                    UpdatedAt DATETIME DEFAULT GETDATE(),

                    FOREIGN KEY (UserID) REFERENCES Users(UserID)
                );
            `);
            console.log('‚úÖ CoachProfiles table created');
        } else {
            console.log('‚ÑπÔ∏è CoachProfiles table already exists');
        }

        // Check if CoachReviews table exists
        console.log('üîç Checking if CoachReviews table exists...');
        const checkCoachReviews = await sql.query(`
            SELECT COUNT(*) as count 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'CoachReviews'
        `);

        if (checkCoachReviews.recordset[0].count === 0) {
            console.log('üìã Creating CoachReviews table...');
            await sql.query(`
                CREATE TABLE CoachReviews (
                    ReviewID INT IDENTITY(1,1) PRIMARY KEY,
                    CoachUserID INT NOT NULL,
                    ClientName NVARCHAR(255),
                    ReviewTitle NVARCHAR(255),
                    ReviewContent NVARCHAR(MAX),
                    Rating INT NOT NULL CHECK (Rating BETWEEN 1 AND 5),
                    IsAnonymous BIT DEFAULT 0,
                    IsVerified BIT DEFAULT 0,
                    IsPublic BIT DEFAULT 1,
                    CreatedAt DATETIME DEFAULT GETDATE(),
                    UpdatedAt DATETIME DEFAULT GETDATE(),

                    FOREIGN KEY (CoachUserID) REFERENCES Users(UserID)
                );
            `);
            console.log('‚úÖ CoachReviews table created');
        } else {
            console.log('‚ÑπÔ∏è CoachReviews table already exists');
        }

        // Insert sample data if tables are empty
        console.log('üìä Checking for existing coach profile data...');
        const profileCount = await sql.query('SELECT COUNT(*) as count FROM CoachProfiles WHERE UserID = 3');

        if (profileCount.recordset[0].count === 0) {
            console.log('üìù Inserting sample coach profile...');
            await sql.query(`
                INSERT INTO CoachProfiles (UserID, Bio, Specialization, Experience, HourlyRate, IsAvailable, YearsOfExperience, Education, Certifications, Languages, WorkingHours, ConsultationTypes, SuccessRate, TotalClients)
                VALUES 
                (3, N'T√¥i l√† m·ªôt coach chuy√™n nghi·ªáp v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám h·ªó tr·ª£ ng∆∞·ªùi cai thu·ªëc l√°. T√¥i ƒë√£ gi√∫p h√†ng trƒÉm ng∆∞·ªùi th√†nh c√¥ng trong h√†nh tr√¨nh cai thu·ªëc c·ªßa h·ªç.', 
                 N'Cai thu·ªëc l√°, T∆∞ v·∫•n s·ª©c kh·ªèe t√¢m l√Ω', 5, 200000.00, 1, 5, 
                 N'Th·∫°c sƒ© T√¢m l√Ω h·ªçc - ƒê·∫°i h·ªçc Y H√† N·ªôi', 
                 N'Ch·ª©ng ch·ªâ t∆∞ v·∫•n vi√™n cai thu·ªëc qu·ªëc t·∫ø, Ch·ª©ng ch·ªâ CBT (Cognitive Behavioral Therapy)', 
                 N'Ti·∫øng Vi·ªát, Ti·∫øng Anh', 
                 N'Th·ª© 2-6: 8:00-17:00, Th·ª© 7: 8:00-12:00', 
                 N'Video call, Voice call, Chat', 
                 85.5, 150)
            `);
            console.log('‚úÖ Sample coach profile inserted');
        }

        const reviewCount = await sql.query('SELECT COUNT(*) as count FROM CoachReviews WHERE CoachUserID = 3');

        if (reviewCount.recordset[0].count === 0) {
            console.log('üìù Inserting sample reviews...');
            await sql.query(`
                INSERT INTO CoachReviews (CoachUserID, ClientName, ReviewTitle, ReviewContent, Rating, IsAnonymous, IsVerified, IsPublic)
                VALUES 
                (3, N'Nguy·ªÖn VƒÉn A', N'Coach r·∫•t t·∫≠n t√¢m', N'Coach Smith ƒë√£ gi√∫p t√¥i r·∫•t nhi·ªÅu trong vi·ªác cai thu·ªëc. Nh·ªØng l·ªùi khuy√™n c·ªßa coach r·∫•t thi·∫øt th·ª±c v√† hi·ªáu qu·∫£.', 5, 0, 1, 1),
                (3, N'Tr·∫ßn Th·ªã B', N'Ph∆∞∆°ng ph√°p hi·ªáu qu·∫£', N'T√¥i ƒë√£ th·ª≠ nhi·ªÅu c√°ch nh∆∞ng kh√¥ng th√†nh c√¥ng. Nh·ªù c√≥ coach m√† t√¥i ƒë√£ cai ƒë∆∞·ª£c thu·ªëc sau 3 th√°ng.', 5, 0, 1, 1),
                (3, N'L√™ VƒÉn C', N'H·ªó tr·ª£ t·ªët', N'Coach lu√¥n s·∫µn s√†ng h·ªó tr·ª£ khi t√¥i g·∫∑p kh√≥ khƒÉn. R·∫•t recommend!', 4, 0, 1, 1)
            `);
            console.log('‚úÖ Sample reviews inserted');
        }

        console.log('üéâ Coach tables setup completed successfully!');
        console.log('üìã Tables created: CoachProfiles, CoachReviews');
        console.log('üîó Now the coaches API should work properly');

        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error creating coach tables:', error.message);
        process.exit(1);
    }
}

createCoachTables(); 