const { pool } = require('./src/config/database');

async function fixAchievementsDatabase() {
    try {
        console.log('üîß Fixing Achievements Database Issues...\n');

        // Step 1: Check if Achievements table exists
        console.log('1. üìä Checking Achievements table...');
        const tableCheck = await pool.request().query(`
            SELECT COUNT(*) as count 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'Achievements'
        `);

        if (tableCheck.recordset[0].count === 0) {
            console.log('‚ùå Achievements table does not exist. Creating...');

            await pool.request().query(`
                CREATE TABLE Achievements (
                    AchievementID INT PRIMARY KEY IDENTITY(1,1),
                    Name NVARCHAR(100) NOT NULL,
                    Description NVARCHAR(255),
                    IconURL NVARCHAR(255),
                    MilestoneDays INT NULL,
                    SavedMoney INT NULL,
                    Category NVARCHAR(50),
                    RequiredPlan NVARCHAR(20),
                    Difficulty INT,
                    Points INT DEFAULT 0,
                    IsActive BIT DEFAULT 1,
                    CreatedAt DATETIME DEFAULT GETDATE()
                )
            `);
            console.log('‚úÖ Achievements table created');
        } else {
            console.log('‚úÖ Achievements table exists');

            // Step 2: Check if new columns exist
            console.log('\n2. üîç Checking for missing columns...');
            const columns = await pool.request().query(`
                SELECT COLUMN_NAME 
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_NAME = 'Achievements'
            `);

            const existingColumns = columns.recordset.map(col => col.COLUMN_NAME);
            const requiredColumns = ['Category', 'RequiredPlan', 'Difficulty', 'Points', 'IsActive'];

            for (const column of requiredColumns) {
                if (!existingColumns.includes(column)) {
                    console.log(`‚ûï Adding missing column: ${column}`);

                    switch (column) {
                        case 'Category':
                            await pool.request().query('ALTER TABLE Achievements ADD Category NVARCHAR(50)');
                            break;
                        case 'RequiredPlan':
                            await pool.request().query('ALTER TABLE Achievements ADD RequiredPlan NVARCHAR(20)');
                            break;
                        case 'Difficulty':
                            await pool.request().query('ALTER TABLE Achievements ADD Difficulty INT');
                            break;
                        case 'Points':
                            await pool.request().query('ALTER TABLE Achievements ADD Points INT DEFAULT 0');
                            break;
                        case 'IsActive':
                            await pool.request().query('ALTER TABLE Achievements ADD IsActive BIT DEFAULT 1');
                            break;
                    }
                    console.log(`‚úÖ Added column: ${column}`);
                } else {
                    console.log(`‚úÖ Column exists: ${column}`);
                }
            }
        }

        // Step 3: Clear existing data and insert new achievements
        console.log('\n3. üßπ Clearing existing achievements...');
        await pool.request().query('DELETE FROM UserAchievements');
        await pool.request().query('DELETE FROM Achievements');

        // Step 4: Insert enhanced achievements
        console.log('\n4. üöÄ Inserting enhanced achievements...');

        const achievements = [
            // Basic Plan
            { name: 'üåü B∆∞·ªõc ƒë·∫ßu kh·ªüi ƒë·∫ßu', desc: 'Ho√†n th√†nh ng√†y ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc (Basic Plan)', icon: 'üåü', cat: 'basic', days: 1, money: null, plan: 'basic', diff: 1, pts: 10 },
            { name: '‚≠ê Tu·∫ßn l·ªÖ d·∫ªo dai', desc: 'Ki√™n tr√¨ 7 ng√†y kh√¥ng h√∫t thu·ªëc (Basic Plan)', icon: '‚≠ê', cat: 'basic', days: 7, money: null, plan: 'basic', diff: 2, pts: 50 },
            { name: 'üèÖ Chi·∫øn binh th√°ng ƒë·∫ßu', desc: 'V∆∞·ª£t qua th·ª≠ th√°ch 30 ng√†y ƒë·∫ßu ti√™n (Basic Plan)', icon: 'üèÖ', cat: 'basic', days: 30, money: null, plan: 'basic', diff: 3, pts: 200 },

            // Premium Plan
            { name: 'üíé Kh·ªüi ƒë·∫ßu Premium', desc: 'Ho√†n th√†nh ng√†y ƒë·∫ßu v·ªõi g√≥i Premium', icon: 'üíé', cat: 'premium', days: 1, money: null, plan: 'premium', diff: 1, pts: 15 },
            { name: 'üî• Tu·∫ßn l·ªÖ Premium', desc: 'Ki√™n tr√¨ 7 ng√†y v·ªõi h·ªó tr·ª£ Premium', icon: 'üî•', cat: 'premium', days: 7, money: null, plan: 'premium', diff: 2, pts: 75 },
            { name: 'üëë Th√°ng v√†ng Premium', desc: '30 ng√†y ho√†n h·∫£o v·ªõi g√≥i Premium', icon: 'üëë', cat: 'premium', days: 30, money: null, plan: 'premium', diff: 3, pts: 300 },
            { name: 'üéØ Qu√Ω Master Premium', desc: '90 ng√†y ki√™n ƒë·ªãnh v·ªõi Premium', icon: 'üéØ', cat: 'premium', days: 90, money: null, plan: 'premium', diff: 4, pts: 500 },

            // Pro Plan
            { name: 'üöÄ Pro Starter', desc: 'B·∫Øt ƒë·∫ßu h√†nh tr√¨nh v·ªõi g√≥i Pro', icon: 'üöÄ', cat: 'pro', days: 1, money: null, plan: 'pro', diff: 1, pts: 20 },
            { name: 'üí™ Pro Warrior', desc: 'Chi·∫øn th·∫Øng tu·∫ßn ƒë·∫ßu v·ªõi Pro', icon: 'üí™', cat: 'pro', days: 7, money: null, plan: 'pro', diff: 2, pts: 100 },
            { name: 'üèÜ Pro Champion', desc: 'Th√°ng ƒë·∫ßu ho√†n h·∫£o v·ªõi Pro', icon: 'üèÜ', cat: 'pro', days: 30, money: null, plan: 'pro', diff: 3, pts: 400 },
            { name: 'üåü Pro Legend', desc: 'Qu√Ω ƒë·∫ßu huy·ªÅn tho·∫°i v·ªõi Pro', icon: 'üåü', cat: 'pro', days: 90, money: null, plan: 'pro', diff: 4, pts: 800 },
            { name: 'üë®‚Äçüéì Pro Master', desc: '6 th√°ng ki√™n tr√¨ v·ªõi Pro', icon: 'üë®‚Äçüéì', cat: 'pro', days: 180, money: null, plan: 'pro', diff: 5, pts: 1500 },
            { name: 'üéñÔ∏è Pro Grandmaster', desc: '1 nƒÉm ho√†n h·∫£o v·ªõi Pro', icon: 'üéñÔ∏è', cat: 'pro', days: 365, money: null, plan: 'pro', diff: 6, pts: 3000 },

            // Money Achievements
            { name: 'üí∞ Ti·∫øt ki·ªám kh·ªüi ƒë·∫ßu', desc: 'Ti·∫øt ki·ªám ƒë∆∞·ª£c 50,000 VNƒê', icon: 'üí∞', cat: 'money', days: null, money: 50000, plan: null, diff: 1, pts: 25 },
            { name: 'üíµ T√∫i ti·ªÅn d√†y l√™n', desc: 'Ti·∫øt ki·ªám ƒë∆∞·ª£c 100,000 VNƒê', icon: 'üíµ', cat: 'money', days: null, money: 100000, plan: null, diff: 2, pts: 50 },
            { name: 'üíé Kho b√°u nh·ªè', desc: 'Ti·∫øt ki·ªám ƒë∆∞·ª£c 500,000 VNƒê', icon: 'üíé', cat: 'money', days: null, money: 500000, plan: null, diff: 3, pts: 150 },
            { name: 'üè¶ Tri·ªáu ph√∫ nh·ªè', desc: 'Ti·∫øt ki·ªám ƒë∆∞·ª£c 1,000,000 VNƒê', icon: 'üè¶', cat: 'money', days: null, money: 1000000, plan: null, diff: 4, pts: 300 },
            { name: 'üí∏ T·ª∑ ph√∫ t∆∞∆°ng lai', desc: 'Ti·∫øt ki·ªám ƒë∆∞·ª£c 5,000,000 VNƒê', icon: 'üí∏', cat: 'money', days: null, money: 5000000, plan: null, diff: 5, pts: 750 },

            // Special & Social
            { name: 'üéâ Ng∆∞·ªùi ti√™n phong', desc: 'L√† m·ªôt trong 100 ng∆∞·ªùi ƒë·∫ßu ti√™n tham gia', icon: 'üéâ', cat: 'special', days: null, money: null, plan: null, diff: 1, pts: 100 },
            { name: 'ü§ù Ng∆∞·ªùi chia s·∫ª', desc: 'Chia s·∫ª 10 b√†i vi·∫øt trong c·ªông ƒë·ªìng', icon: 'ü§ù', cat: 'social', days: null, money: null, plan: null, diff: 2, pts: 80 },
            { name: 'üí¨ Ng∆∞·ªùi truy·ªÅn c·∫£m h·ª©ng', desc: 'Nh·∫≠n ƒë∆∞·ª£c 50 likes trong c·ªông ƒë·ªìng', icon: 'üí¨', cat: 'social', days: null, money: null, plan: null, diff: 3, pts: 120 }
        ];

        for (const ach of achievements) {
            try {
                await pool.request()
                    .input('Name', ach.name)
                    .input('Description', ach.desc)
                    .input('IconURL', ach.icon)
                    .input('MilestoneDays', ach.days)
                    .input('SavedMoney', ach.money)
                    .input('Category', ach.cat)
                    .input('RequiredPlan', ach.plan)
                    .input('Difficulty', ach.diff)
                    .input('Points', ach.pts)
                    .query(`
                        INSERT INTO Achievements (
                            Name, Description, IconURL, MilestoneDays, SavedMoney,
                            Category, RequiredPlan, Difficulty, Points, IsActive, CreatedAt
                        ) VALUES (
                            @Name, @Description, @IconURL, @MilestoneDays, @SavedMoney,
                            @Category, @RequiredPlan, @Difficulty, @Points, 1, GETDATE()
                        )
                    `);
                console.log(`‚úÖ Created: ${ach.name}`);
            } catch (error) {
                console.error(`‚ùå Error creating ${ach.name}:`, error.message);
            }
        }

        // Step 5: Show summary
        const count = await pool.request().query('SELECT COUNT(*) as count FROM Achievements');
        console.log(`\nüéØ Total achievements created: ${count.recordset[0].count}`);

        console.log('\n‚úÖ Database fix completed successfully!');
        console.log('üí° You can now reload the frontend page to see achievements!');

    } catch (error) {
        console.error('‚ùå Error fixing database:', error);
        throw error;
    }
}

if (require.main === module) {
    fixAchievementsDatabase()
        .then(() => {
            console.log('‚úÖ Script completed successfully!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Script failed:', error);
            process.exit(1);
        });
}

module.exports = { fixAchievementsDatabase }; 