const { pool, connectDB } = require('./src/config/database');

async function checkCoachProfile() {
    try {
        await connectDB();
        console.log('üîç Checking CoachProfiles table...');

        const result = await pool.request()
            .input('UserID', 3)
            .query('SELECT * FROM CoachProfiles WHERE UserID = @UserID');

        console.log('Coach Profile for UserID 3:', result.recordset);

        if (result.recordset.length === 0) {
            console.log('üìù Creating CoachProfile for UserID 3...');
            await pool.request()
                .input('UserID', 3)
                .query(`
                    INSERT INTO CoachProfiles (
                        UserID, Bio, Specialization, Experience, HourlyRate, IsAvailable,
                        YearsOfExperience, Education, Certifications, Languages, WorkingHours
                    ) VALUES (
                        @UserID, 
                        N'T√¥i l√† m·ªôt coach chuy√™n nghi·ªáp v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám h·ªó tr·ª£ ng∆∞·ªùi cai thu·ªëc l√°. T√¥i ƒë√£ gi√∫p h√†ng trƒÉm ng∆∞·ªùi th√†nh c√¥ng trong h√†nh tr√¨nh cai thu·ªëc c·ªßa h·ªç.',
                        N'Cai thu·ªëc l√°, T∆∞ v·∫•n s·ª©c kh·ªèe t√¢m l√Ω',
                        5,
                        100000,
                        1,
                        5,
                        N'Th·∫°c sƒ© T√¢m l√Ω h·ªçc - ƒê·∫°i h·ªçc Y H√† N·ªôi',
                        N'Ch·ª©ng ch·ªâ t∆∞ v·∫•n vi√™n cai thu·ªëc qu·ªëc t·∫ø, Ch·ª©ng ch·ªâ CBT (Cognitive Behavioral Therapy)',
                        N'Ti·∫øng Vi·ªát, Ti·∫øng Anh',
                        N'Th·ª© 2-6: 8:00-17:00, Th·ª© 7: 8:00-12:00'
                    )
                `);
            console.log('‚úÖ CoachProfile created successfully!');
        } else {
            console.log('‚úÖ CoachProfile already exists!');

            // Update IsAvailable to true to make sure coach is available for booking
            await pool.request()
                .input('UserID', 3)
                .query(`
                    UPDATE CoachProfiles 
                    SET IsAvailable = 1,
                        Bio = N'T√¥i l√† m·ªôt coach chuy√™n nghi·ªáp v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám h·ªó tr·ª£ ng∆∞·ªùi cai thu·ªëc l√°. T√¥i ƒë√£ gi√∫p h√†ng trƒÉm ng∆∞·ªùi th√†nh c√¥ng trong h√†nh tr√¨nh cai thu·ªëc c·ªßa h·ªç.'
                    WHERE UserID = @UserID
                `);
            console.log('‚úÖ CoachProfile updated to be available!');
        }

        // Now test the assigned coach query
        console.log('\nüß™ Testing assigned coach query for user 6...');
        const testResult = await pool.request()
            .input('UserID', 6)
            .query(`
                SELECT 
                    c.UserID as CoachID,
                    c.Email as CoachEmail,
                    c.FirstName as CoachFirstName,
                    c.LastName as CoachLastName,
                    c.Avatar as CoachAvatar,
                    c.PhoneNumber as CoachPhoneNumber,
                    cp.Bio,
                    cp.Specialization,
                    cp.Experience,
                    cp.HourlyRate,
                    cp.IsAvailable,
                    cp.YearsOfExperience,
                    cp.Education,
                    cp.Certifications,
                    cp.Languages,
                    cp.WorkingHours,
                    cp.ConsultationTypes,
                    qp.PlanID as QuitPlanID,
                    qp.StartDate as AssignmentDate,
                    qp.Status as QuitPlanStatus
                FROM QuitPlans qp
                INNER JOIN Users c ON qp.CoachID = c.UserID
                LEFT JOIN CoachProfiles cp ON c.UserID = cp.UserID
                WHERE qp.UserID = @UserID 
                    AND qp.Status = 'active'
                    AND qp.CoachID IS NOT NULL
                    AND c.Role = 'coach'
                    AND c.IsActive = 1
            `);

        console.log('üìä Query result:', testResult.recordset);

        if (testResult.recordset.length > 0) {
            console.log('üéâ SUCCESS! Coach assignment is working now!');
            const coach = testResult.recordset[0];
            console.log(`   Coach: ${coach.CoachFirstName} ${coach.CoachLastName}`);
            console.log(`   Available: ${coach.IsAvailable}`);
            console.log(`   Bio: ${coach.Bio?.substring(0, 50)}...`);
        } else {
            console.log('‚ùå Still no coach assignment found');
        }

    } catch (error) {
        console.error('‚ùå Error:', error);
    }
}

if (require.main === module) {
    checkCoachProfile()
        .then(() => {
            console.log('\n‚úÖ Check completed');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå Error:', error);
            process.exit(1);
        });
}

module.exports = { checkCoachProfile }; 