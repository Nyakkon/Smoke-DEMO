const { pool } = require('./src/config/database');

async function createTestPosts() {
    try {
        console.log('üîß Creating test posts for delete functionality...');

        // Check if CommunityPosts table exists
        const tableCheck = await pool.request().query(`
            SELECT COUNT(*) as count 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'CommunityPosts'
        `);

        if (tableCheck.recordset[0].count === 0) {
            console.log('‚ùå CommunityPosts table does not exist. Please run setup first.');
            return;
        }

        // Create test posts for different users
        const testPosts = [
            {
                userID: 2, // member user
                title: 'H√†nh tr√¨nh cai thu·ªëc ng√†y th·ª© 5',
                content: 'H√¥m nay l√† ng√†y th·ª© 5 t√¥i cai thu·ªëc. C·∫£m th·∫•y kh√≥ khƒÉn nh∆∞ng quy·∫øt t√¢m ti·∫øp t·ª•c. M·ªçi ng∆∞·ªùi c√≥ l·ªùi khuy√™n g√¨ kh√¥ng?'
            },
            {
                userID: 2,
                title: 'Chia s·∫ª m·∫πo v∆∞·ª£t qua c∆°n th√®m',
                content: 'T√¥i ƒë√£ t√¨m ra m·ªôt s·ªë c√°ch hi·ªáu qu·∫£ ƒë·ªÉ v∆∞·ª£t qua c∆°n th√®m thu·ªëc. H√£y ƒÉn k·∫πo cao su v√† u·ªëng nhi·ªÅu n∆∞·ªõc!'
            },
            {
                userID: 3, // coach user  
                title: 'L·ªùi khuy√™n t·ª´ hu·∫•n luy·ªán vi√™n',
                content: 'Vi·ªác cai thu·ªëc l√† m·ªôt h√†nh tr√¨nh d√†i. H√£y ki√™n nh·∫´n v·ªõi b·∫£n th√¢n v√† t√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ c·ªông ƒë·ªìng.'
            }
        ];

        for (const post of testPosts) {
            const result = await pool.request()
                .input('UserID', post.userID)
                .input('Title', post.title)
                .input('Content', post.content)
                .query(`
                    INSERT INTO CommunityPosts (UserID, Title, Content, CreatedAt)
                    OUTPUT INSERTED.PostID, INSERTED.Title
                    VALUES (@UserID, @Title, @Content, DATEADD(HOUR, -${Math.floor(Math.random() * 24)}, GETDATE()))
                `);

            console.log(`‚úÖ Created post: "${result.recordset[0].Title}" (ID: ${result.recordset[0].PostID})`);
        }

        // Show current posts count
        const postsCount = await pool.request().query('SELECT COUNT(*) as count FROM CommunityPosts');
        console.log(`üìä Total posts in database: ${postsCount.recordset[0].count}`);

        // Show posts by user 2 (member) for testing delete functionality
        const userPosts = await pool.request()
            .input('UserID', 2)
            .query(`
                SELECT PostID, Title, CreatedAt
                FROM CommunityPosts 
                WHERE UserID = @UserID
                ORDER BY CreatedAt DESC
            `);

        console.log('\nüìù Posts by User ID 2 (member) that can be deleted:');
        userPosts.recordset.forEach(post => {
            console.log(`- Post ${post.PostID}: "${post.Title}"`);
        });

        console.log('\n‚úÖ Test posts created successfully!');
        console.log('üí° Now you can test the delete functionality in the frontend.');

    } catch (error) {
        console.error('‚ùå Error creating test posts:', error);
        throw error;
    }
}

if (require.main === module) {
    createTestPosts()
        .then(() => {
            console.log('‚úÖ Script completed!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Script failed:', error);
            process.exit(1);
        });
}

module.exports = { createTestPosts }; 