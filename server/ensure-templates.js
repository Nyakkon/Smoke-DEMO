const sql = require('mssql');

// Database configuration
const config = {
    user: 'sa',
    password: '12345',
    server: 'localhost',
    database: 'SMOKEKING',
    options: {
        encrypt: true,
        trustServerCertificate: true,
    },
};

async function ensurePlanTemplates() {
    let pool = null;
    try {
        console.log('üöÄ Ensuring PlanTemplates are properly set up...\n');

        // Connect to database
        console.log('üîó Connecting to database...');
        pool = await sql.connect(config);
        console.log('‚úÖ Database connected\n');

        // 1. Check if PlanTemplates table exists
        console.log('üìã Checking if PlanTemplates table exists...');
        const tableExists = await pool.request().query(`
            SELECT COUNT(*) as tableExists 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'PlanTemplates'
        `);

        if (tableExists.recordset[0].tableExists === 0) {
            console.log('‚ùå PlanTemplates table does not exist. Creating...');
            await pool.request().query(`
                CREATE TABLE PlanTemplates (
                    TemplateID INT IDENTITY(1,1) PRIMARY KEY,
                    PlanID INT FOREIGN KEY REFERENCES MembershipPlans(PlanID),
                    PhaseName NVARCHAR(255) NOT NULL,
                    PhaseDescription NVARCHAR(MAX) NOT NULL,
                    DurationDays INT NOT NULL,
                    SortOrder INT NOT NULL,
                    CreatedAt DATETIME DEFAULT GETDATE()
                );
            `);
            console.log('‚úÖ PlanTemplates table created');
        } else {
            console.log('‚úÖ PlanTemplates table exists');
        }

        // 2. Check current template count
        const currentCount = await pool.request().query(`
            SELECT COUNT(*) as count FROM PlanTemplates
        `);
        console.log(`üìä Current templates count: ${currentCount.recordset[0].count}`);

        // 3. Check available membership plans
        const membershipPlans = await pool.request().query(`
            SELECT PlanID, Name FROM MembershipPlans ORDER BY PlanID
        `);
        console.log('üìã Available membership plans:');
        membershipPlans.recordset.forEach(plan => {
            console.log(`   ${plan.PlanID}: ${plan.Name}`);
        });

        if (membershipPlans.recordset.length === 0) {
            console.log('‚ùå No membership plans found! Please insert membership plans first.');
            return false;
        }

        // 4. Clear existing templates and recreate
        console.log('\nüßπ Clearing existing templates...');
        await pool.request().query(`DELETE FROM PlanTemplates`);

        // 5. Create template data for each plan
        console.log('üìù Creating template data...\n');

        for (const plan of membershipPlans.recordset) {
            const planId = plan.PlanID;
            const planName = plan.Name;

            console.log(`Creating templates for ${planName} (ID: ${planId})...`);

            if (planName.includes('Basic')) {
                await pool.request().query(`
                    INSERT INTO PlanTemplates (PlanID, PhaseName, PhaseDescription, DurationDays, SortOrder) VALUES
                    (${planId}, N'Tu·∫ßn 1: Chu·∫©n b·ªã tinh th·∫ßn', N'‚Ä¢ X√°c ƒë·ªãnh l√Ω do cai thu·ªëc r√µ r√†ng
‚Ä¢ Lo·∫°i b·ªè t·∫•t c·∫£ thu·ªëc l√° v√† d·ª•ng c·ª• h√∫t thu·ªëc
‚Ä¢ Th√¥ng b√°o cho gia ƒë√¨nh, b·∫°n b√® v·ªÅ quy·∫øt ƒë·ªãnh
‚Ä¢ B·∫Øt ƒë·∫ßu ghi nh·∫≠t k√Ω c·∫£m x√∫c h√†ng ng√†y
‚Ä¢ T·∫≠p th·ªü s√¢u khi c·∫£m th·∫•y th√®m thu·ªëc', 7, 1),

                    (${planId}, N'Tu·∫ßn 2: Thay ƒë·ªïi th√≥i quen', N'‚Ä¢ Thay ƒë·ªïi l·ªãch tr√¨nh h√†ng ng√†y ƒë·ªÉ tr√°nh trigger
‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc, ƒÉn k·∫πo kh√¥ng ƒë∆∞·ªùng khi th√®m
‚Ä¢ T·∫≠p th·ªÉ d·ª•c nh·∫π 15-20 ph√∫t/ng√†y
‚Ä¢ T√¨m ho·∫°t ƒë·ªông thay th·∫ø: ƒë·ªçc s√°ch, nghe nh·∫°c
‚Ä¢ T√≠nh to√°n s·ªë ti·ªÅn ti·∫øt ki·ªám ƒë∆∞·ª£c', 7, 2),

                    (${planId}, N'Tu·∫ßn 3-4: C·ªßng c·ªë √Ω ch√≠', N'‚Ä¢ Ti·∫øp t·ª•c duy tr√¨ th√≥i quen t·ªët
‚Ä¢ Tham gia c·ªông ƒë·ªìng h·ªó tr·ª£ cai thu·ªëc
‚Ä¢ Th∆∞·ªüng cho b·∫£n th√¢n khi ƒë·∫°t milestone
‚Ä¢ X·ª≠ l√Ω stress b·∫±ng c√°ch t√≠ch c·ª±c
‚Ä¢ Chu·∫©n b·ªã cho nh·ªØng th·ª≠ th√°ch d√†i h·∫°n', 14, 3)
                `);
                console.log(`   ‚úÖ Added 3 phases for ${planName}`);
            }
            else if (planName.includes('Premium')) {
                await pool.request().query(`
                    INSERT INTO PlanTemplates (PlanID, PhaseName, PhaseDescription, DurationDays, SortOrder) VALUES
                    (${planId}, N'Tu·∫ßn 1-2: Detox v√† chu·∫©n b·ªã', N'‚Ä¢ Th·ª±c hi·ªán detox c∆° th·ªÉ v·ªõi ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh
‚Ä¢ B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh t·∫≠p luy·ªán th·ªÉ ch·∫•t
‚Ä¢ Thi·∫øt l·∫≠p h·ªá th·ªëng h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®
‚Ä¢ H·ªçc c√°c k·ªπ thu·∫≠t th∆∞ gi√£n: thi·ªÅn, yoga
‚Ä¢ Ghi ch√©p chi ti·∫øt v·ªÅ triggers v√† c√°ch ƒë·ªëi ph√≥', 14, 1),

                    (${planId}, N'Tu·∫ßn 3-4: X√¢y d·ª±ng th√≥i quen m·ªõi', N'‚Ä¢ Ph√°t tri·ªÉn hobby m·ªõi ƒë·ªÉ thay th·∫ø th·ªùi gian h√∫t thu·ªëc
‚Ä¢ Tham gia c√°c nh√≥m h·ªó tr·ª£ tr·ª±c tuy·∫øn/offline
‚Ä¢ √Åp d·ª•ng k·ªπ thu·∫≠t CBT (Cognitive Behavioral Therapy)
‚Ä¢ Theo d√µi c·∫£i thi·ªán s·ª©c kh·ªèe: huy·∫øt √°p, nh·ªãp tim
‚Ä¢ L·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh t·ª´ ti·ªÅn ti·∫øt ki·ªám', 14, 2),

                    (${planId}, N'Tu·∫ßn 5-6: ƒê·ªëi ph√≥ v·ªõi kh√≥ khƒÉn', N'‚Ä¢ Nh·∫≠n di·ªán v√† x·ª≠ l√Ω c√°c t√¨nh hu·ªëng nguy hi·ªÉm
‚Ä¢ Ph√°t tri·ªÉn k·ªπ nƒÉng qu·∫£n l√Ω stress n√¢ng cao
‚Ä¢ T·∫°o ƒë·ªông l·ª±c d√†i h·∫°n v·ªõi m·ª•c ti√™u c·ª• th·ªÉ
‚Ä¢ ƒê√°nh gi√° ti·∫øn b·ªô v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch
‚Ä¢ Chu·∫©n b·ªã t√¢m l√Ω cho giai ƒëo·∫°n duy tr√¨', 14, 3),

                    (${planId}, N'Tu·∫ßn 7-8: Duy tr√¨ v√† ph√°t tri·ªÉn', N'‚Ä¢ ·ªîn ƒë·ªãnh l·ªëi s·ªëng kh√¥ng thu·ªëc l√°
‚Ä¢ M·ªü r·ªông m·∫°ng l∆∞·ªõi h·ªó tr·ª£ x√£ h·ªôi
‚Ä¢ Theo d√µi v√† c·∫£i thi·ªán s·ª©c kh·ªèe tinh th·∫ßn
‚Ä¢ L·∫≠p k·∫ø ho·∫°ch ph√≤ng ng·ª´a t√°i ph√°t
‚Ä¢ Chia s·∫ª kinh nghi·ªám ƒë·ªÉ gi√∫p ng∆∞·ªùi kh√°c', 14, 4)
                `);
                console.log(`   ‚úÖ Added 4 phases for ${planName}`);
            }
            else if (planName.includes('Pro')) {
                await pool.request().query(`
                    INSERT INTO PlanTemplates (PlanID, PhaseName, PhaseDescription, DurationDays, SortOrder) VALUES
                    (${planId}, N'Tu·∫ßn 1-2: ƒê√°nh gi√° v√† chu·∫©n b·ªã chuy√™n s√¢u', N'‚Ä¢ ƒê√°nh gi√° m·ª©c ƒë·ªô nghi·ªán nicotine v√† s·ª©c kh·ªèe t·ªïng th·ªÉ
‚Ä¢ Thi·∫øt k·∫ø ch∆∞∆°ng tr√¨nh cai thu·ªëc c√° nh√¢n h√≥a
‚Ä¢ B·∫Øt ƒë·∫ßu li·ªáu ph√°p thay th·∫ø nicotine (n·∫øu c·∫ßn)
‚Ä¢ X√¢y d·ª±ng k·∫ø ho·∫°ch dinh d∆∞·ª°ng v√† t·∫≠p luy·ªán chuy√™n nghi·ªáp
‚Ä¢ Thi·∫øt l·∫≠p h·ªá th·ªëng theo d√µi s·ª©c kh·ªèe 24/7', 14, 1),

                    (${planId}, N'Tu·∫ßn 3-4: Can thi·ªáp chuy√™n nghi·ªáp', N'‚Ä¢ Tham v·∫•n t√¢m l√Ω v·ªõi chuy√™n gia h√†ng tu·∫ßn
‚Ä¢ √Åp d·ª•ng li·ªáu ph√°p h√†nh vi nh·∫≠n th·ª©c CBT
‚Ä¢ S·ª≠ d·ª•ng ·ª©ng d·ª•ng AI theo d√µi mood v√† trigger
‚Ä¢ Tham gia nh√≥m tr·ªã li·ªáu v·ªõi coach chuy√™n nghi·ªáp
‚Ä¢ ƒêo l∆∞·ªùng v√† theo d√µi biomarkers s·ª©c kh·ªèe', 14, 2),

                    (${planId}, N'Tu·∫ßn 5-6: T·ªëi ∆∞a h√≥a l·ªëi s·ªëng', N'‚Ä¢ Personalized coaching 1-on-1 v·ªõi chuy√™n gia
‚Ä¢ Li·ªáu ph√°p th·ªÉ ch·∫•t: massage, acupuncture
‚Ä¢ Ch∆∞∆°ng tr√¨nh dinh d∆∞·ª°ng ƒë∆∞·ª£c t√πy ch·ªânh
‚Ä¢ K·ªπ thu·∫≠t mindfulness v√† thi·ªÅn ƒë·ªãnh n√¢ng cao
‚Ä¢ Theo d√µi ti·∫øn b·ªô v·ªõi c√¥ng ngh·ªá wearable', 14, 3),

                    (${planId}, N'Tu·∫ßn 7-9: C·ªßng c·ªë v√† ph√°t tri·ªÉn b·ªÅn v·ªØng', N'‚Ä¢ Ph√°t tri·ªÉn k·ªπ nƒÉng leadership v√† self-advocacy
‚Ä¢ X√¢y d·ª±ng k·∫ø ho·∫°ch career v√† personal growth
‚Ä¢ Tham gia c√°c ho·∫°t ƒë·ªông c·ªông ƒë·ªìng √Ω nghƒ©a
‚Ä¢ Thi·∫øt l·∫≠p h·ªá th·ªëng accountability d√†i h·∫°n
‚Ä¢ Chu·∫©n b·ªã tr·ªü th√†nh mentor cho ng∆∞·ªùi kh√°c', 21, 4),

                    (${planId}, N'Tu·∫ßn 10-12: Tr·ªü th√†nh champion', N'‚Ä¢ Chia s·∫ª c√¢u chuy·ªán th√†nh c√¥ng v·ªõi c·ªông ƒë·ªìng
‚Ä¢ Ph√°t tri·ªÉn k·ªπ nƒÉng coaching ƒë·ªÉ gi√∫p ng∆∞·ªùi kh√°c
‚Ä¢ Thi·∫øt l·∫≠p lifestyle v√† career goals d√†i h·∫°n
‚Ä¢ Duy tr√¨ s·ª©c kh·ªèe t·ªëi ∆∞u v·ªõi check-up ƒë·ªãnh k·ª≥
‚Ä¢ X√¢y d·ª±ng legacy v√† impact t√≠ch c·ª±c', 21, 5)
                `);
                console.log(`   ‚úÖ Added 5 phases for ${planName}`);
            } else {
                // Default template for any other plan
                await pool.request().query(`
                    INSERT INTO PlanTemplates (PlanID, PhaseName, PhaseDescription, DurationDays, SortOrder) VALUES
                    (${planId}, N'Giai ƒëo·∫°n 1: B·∫Øt ƒë·∫ßu', N'‚Ä¢ Thi·∫øt l·∫≠p m·ª•c ti√™u cai thu·ªëc r√µ r√†ng
‚Ä¢ Chu·∫©n b·ªã tinh th·∫ßn v√† m√¥i tr∆∞·ªùng ph√π h·ª£p
‚Ä¢ T√¨m hi·ªÉu v·ªÅ t√°c h·∫°i c·ªßa thu·ªëc l√°', 7, 1),

                    (${planId}, N'Giai ƒëo·∫°n 2: Th·ª±c hi·ªán', N'‚Ä¢ Thay ƒë·ªïi th√≥i quen h√†ng ng√†y
‚Ä¢ √Åp d·ª•ng c√°c k·ªπ thu·∫≠t ƒë·ªëi ph√≥ v·ªõi c∆°n th√®m
‚Ä¢ Theo d√µi ti·∫øn tr√¨nh h√†ng ng√†y', 14, 2),

                    (${planId}, N'Giai ƒëo·∫°n 3: Duy tr√¨', N'‚Ä¢ C·ªßng c·ªë th√†nh qu·∫£ ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
‚Ä¢ X√¢y d·ª±ng l·ªëi s·ªëng l√†nh m·∫°nh
‚Ä¢ Chu·∫©n b·ªã cho vi·ªác duy tr√¨ l√¢u d√†i', 14, 3)
                `);
                console.log(`   ‚úÖ Added 3 default phases for ${planName}`);
            }
        }

        // 6. Verify results
        console.log('\nüîç Verifying results...');
        const finalCount = await pool.request().query(`
            SELECT COUNT(*) as count FROM PlanTemplates
        `);

        const templatesByPlan = await pool.request().query(`
            SELECT 
                mp.Name as PlanName,
                COUNT(pt.TemplateID) as TemplateCount
            FROM MembershipPlans mp
            LEFT JOIN PlanTemplates pt ON mp.PlanID = pt.PlanID
            GROUP BY mp.PlanID, mp.Name
            ORDER BY mp.PlanID
        `);

        console.log(`üìä Total templates created: ${finalCount.recordset[0].count}`);
        console.log('üìã Templates by plan:');
        templatesByPlan.recordset.forEach(row => {
            console.log(`   ${row.PlanName}: ${row.TemplateCount} templates`);
        });

        // 7. Test QuitPlans with DetailedPlan
        console.log('\nüîç Checking QuitPlans with DetailedPlan...');
        const quitPlansWithDetailedPlan = await pool.request().query(`
            SELECT 
                COUNT(*) as totalCount,
                SUM(CASE WHEN DetailedPlan IS NOT NULL AND DetailedPlan != '' THEN 1 ELSE 0 END) as withDetailedPlan
            FROM QuitPlans
        `);

        console.log(`üìä QuitPlans total: ${quitPlansWithDetailedPlan.recordset[0].totalCount}`);
        console.log(`üìä QuitPlans with DetailedPlan: ${quitPlansWithDetailedPlan.recordset[0].withDetailedPlan}`);

        console.log('\nüéâ Setup completed successfully!');
        console.log('\nüìù What this means:');
        console.log('   ‚Ä¢ PlanTemplates: Contains template plans for each membership package');
        console.log('   ‚Ä¢ QuitPlans.DetailedPlan: Contains user\'s custom detailed plan text');
        console.log('   ‚Ä¢ User creates their plan using templates as reference');
        console.log('   ‚Ä¢ The "detailed plan" they write gets saved in QuitPlans.DetailedPlan');

        return true;
    } catch (error) {
        console.error('‚ùå Error ensuring PlanTemplates:', error);
        throw error;
    } finally {
        if (pool) {
            await pool.close();
            console.log('\nüîå Database connection closed');
        }
    }
}

// Run the setup
if (require.main === module) {
    ensurePlanTemplates()
        .then(() => {
            console.log('\n‚úÖ Script completed successfully');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Script failed:', error);
            process.exit(1);
        });
}

module.exports = { ensurePlanTemplates }; 