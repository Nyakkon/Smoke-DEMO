import React, { useState, useEffect } from 'react';
import {
    Form,
    Input,
    Button,
    Card,
    Typography,
    message,
    Spin,
    DatePicker,
    InputNumber,
    Alert,
    Space,
    Divider,
    Row,
    Col,
    List,
    Tag,
    Tabs,
    Progress,
    Statistic,
    notification,
    Badge
} from 'antd';
import {
    CalendarOutlined,
    HeartOutlined,
    BulbOutlined,
    CheckCircleOutlined,
    ExclamationCircleOutlined,
    PlusOutlined,
    BookOutlined,
    TrophyOutlined,
    DollarOutlined,
    FireOutlined,
    SmileOutlined,
    SaveOutlined,
    LineChartOutlined
} from '@ant-design/icons';
import axios from 'axios';
import { format, differenceInDays, parseISO } from 'date-fns';
import dayjs from 'dayjs';


const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;
const { TabPane } = Tabs;

// Create axios instance with defaults
const api = axios.create({
    baseURL: 'http://localhost:4000',
    headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    },
    withCredentials: false, // Change to false to avoid CORS issues
    timeout: 10000 // 10 second timeout
});

// Add token to requests
api.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        console.log('API Request:', config.method?.toUpperCase(), config.url);
        return config;
    },
    (error) => {
        console.error('Request interceptor error:', error);
        return Promise.reject(error);
    }
);

// Add response interceptor for better error handling
api.interceptors.response.use(
    (response) => {
        console.log('API Response:', response.status, response.config.url);
        return response;
    },
    (error) => {
        console.error('API Error:', {
            url: error.config?.url,
            status: error.response?.status,
            message: error.message,
            data: error.response?.data
        });
        return Promise.reject(error);
    }
);

const QuitPlanPage = () => {
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(true);
    const [submitting, setSubmitting] = useState(false);
    const [existingPlans, setExistingPlans] = useState([]);
    const [planTemplate, setPlanTemplate] = useState([]);
    const [paymentInfo, setPaymentInfo] = useState(null);
    const [error, setError] = useState(null);
    const [hasAccess, setHasAccess] = useState(false);
    const [userInfo, setUserInfo] = useState(null);
    const [activeTab, setActiveTab] = useState('plan');
    const [justCreatedPlan, setJustCreatedPlan] = useState(false);

    // Check access and load data
    useEffect(() => {
        const checkAccessAndLoadData = async () => {
            try {
                setLoading(true);
                setError(null);

                console.log('üîç Checking access and loading data...');

                // Check if user is logged in
                const token = localStorage.getItem('token');
                if (!token) {
                    console.log('‚ùå No token found, trying to test server first...');

                    // Test server connection first
                    try {
                        const testResponse = await api.get('/api/test-user-data');
                        console.log('‚úÖ Server is running, test data:', testResponse.data);

                        // Try to get templates without auth
                        const templatesResponse = await api.get('/api/quit-plan/templates/all');
                        if (templatesResponse.data?.success) {
                            setPlanTemplate(templatesResponse.data.data || []);
                            console.log('‚úÖ Got templates without auth');
                        }
                    } catch (serverError) {
                        console.error('‚ùå Server test failed:', serverError);
                    }

                    setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y. Tuy nhi√™n server ƒëang ch·∫°y v√† c√≥ data.');
                    setLoading(false);
                    return;
                }

                console.log('üîë Token found, making authenticated request...');

                // Try to get existing quit plans (this will also check access)
                try {
                    const response = await api.get('/api/quit-plan');
                    console.log('‚úÖ Quit plan response:', response.data);

                    setExistingPlans(response.data.data || []);
                    setPlanTemplate(response.data.planTemplate || []);
                    setPaymentInfo(response.data.paymentInfo || null);
                    setHasAccess(true);

                    // üîç DEBUG: Log template data
                    console.log('üîç DEBUG - planTemplate data:', response.data.planTemplate);
                    console.log('üîç DEBUG - planTemplate length:', response.data.planTemplate?.length);
                    console.log('üîç DEBUG - paymentInfo:', response.data.paymentInfo);
                    console.log('üîç DEBUG - Full response:', response.data);

                    // If user has existing plans, populate the form with the latest active plan
                    const activePlans = response.data.data.filter(plan => plan.Status === 'active');
                    if (activePlans.length > 0) {
                        const latestPlan = activePlans[0];
                        form.setFieldsValue({
                            startDate: latestPlan.StartDate ? dayjs(latestPlan.StartDate) : null,
                            targetDate: latestPlan.TargetDate ? dayjs(latestPlan.TargetDate) : null,
                            reason: latestPlan.Reason,
                            motivationLevel: latestPlan.MotivationLevel,
                            detailedPlan: latestPlan.DetailedPlan
                        });
                    } else if (response.data.planTemplate && response.data.planTemplate.length > 0) {
                        // Auto-fill detailed plan with template if no existing plans
                        const templateText = response.data.planTemplate.map((phase, index) =>
                            `${phase.PhaseName || phase.phaseName}:\n${phase.PhaseDescription || phase.phaseDescription}\n`
                        ).join('\n');

                        form.setFieldsValue({
                            detailedPlan: templateText
                        });
                    }
                } catch (planError) {
                    console.error('‚ùå Error accessing quit plan:', planError);

                    if (planError.response?.status === 403) {
                        setError(planError.response.data.message || 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√≠nh nƒÉng n√†y');
                    } else if (planError.response?.status === 401) {
                        setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
                        localStorage.removeItem('token');
                    } else {
                        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau');
                    }
                    setHasAccess(false);

                    // üîß DEBUG: Try to load templates anyway for debugging
                    console.log('üîß DEBUG: Loading templates without auth for debugging...');
                    try {
                        const fallbackTemplatesResponse = await api.get('/api/quit-plan/templates/all');
                        if (fallbackTemplatesResponse.data?.success && fallbackTemplatesResponse.data.data?.length > 0) {
                            // Find Premium Plan templates
                            const premiumPlan = fallbackTemplatesResponse.data.data.find(plan => plan.planInfo.planName === 'Premium Plan');
                            if (premiumPlan) {
                                setPlanTemplate(premiumPlan.phases);
                                setPaymentInfo({ PlanName: 'Premium Plan (Debug)' });
                                console.log('‚úÖ DEBUG: Loaded Premium Plan templates:', premiumPlan.phases);
                            }
                        }
                    } catch (fallbackError) {
                        console.error('‚ùå DEBUG: Fallback template loading failed:', fallbackError);
                    }
                }

                setLoading(false);
            } catch (error) {
                console.error('‚ùå Error in checkAccessAndLoadData:', error);
                setError('ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau');
                setLoading(false);
            }
        };

        checkAccessAndLoadData();
    }, [form]);

    const handleUseTemplate = () => {
        // Use hardcoded template data for now
        const templateData = [
            {
                phaseName: "Tu·∫ßn 1-2: Detox v√† chu·∫©n b·ªã",
                phaseDescription: "‚Ä¢ Th·ª±c hi·ªán detox c∆° th·ªÉ v·ªõi ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh\n‚Ä¢ B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh t·∫≠p luy·ªán th·ªÉ ch·∫•t\n‚Ä¢ Thi·∫øt l·∫≠p h·ªá th·ªëng h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®\n‚Ä¢ H·ªçc c√°c k·ªπ thu·∫≠t th∆∞ gi√£n: thi·ªÅn, yoga\n‚Ä¢ Ghi ch√©p chi ti·∫øt v·ªÅ triggers v√† c√°ch ƒë·ªëi ph√≥"
            },
            {
                phaseName: "Tu·∫ßn 3-4: X√¢y d·ª±ng th√≥i quen m·ªõi",
                phaseDescription: "‚Ä¢ Ph√°t tri·ªÉn hobby m·ªõi ƒë·ªÉ thay th·∫ø th·ªùi gian h√∫t thu·ªëc\n‚Ä¢ Tham gia c√°c nh√≥m h·ªó tr·ª£ tr·ª±c tuy·∫øn/offline\n‚Ä¢ √Åp d·ª•ng k·ªπ thu·∫≠t CBT (Cognitive Behavioral Therapy)\n‚Ä¢ Theo d√µi c·∫£i thi·ªán s·ª©c kh·ªèe: huy·∫øt √°p, nh·ªãp tim\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh t·ª´ ti·ªÅn ti·∫øt ki·ªám"
            },
            {
                phaseName: "Tu·∫ßn 5-6: ƒê·ªëi ph√≥ v·ªõi kh√≥ khƒÉn",
                phaseDescription: "‚Ä¢ Nh·∫≠n di·ªán v√† x·ª≠ l√Ω c√°c t√¨nh hu·ªëng nguy hi·ªÉm\n‚Ä¢ Ph√°t tri·ªÉn k·ªπ nƒÉng qu·∫£n l√Ω stress n√¢ng cao\n‚Ä¢ T·∫°o ƒë·ªông l·ª±c d√†i h·∫°n v·ªõi m·ª•c ti√™u c·ª• th·ªÉ\n‚Ä¢ ƒê√°nh gi√° ti·∫øn b·ªô v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch\n‚Ä¢ Chu·∫©n b·ªã t√¢m l√Ω cho giai ƒëo·∫°n duy tr√¨"
            },
            {
                phaseName: "Tu·∫ßn 7-8: Duy tr√¨ v√† ph√°t tri·ªÉn",
                phaseDescription: "‚Ä¢ ·ªîn ƒë·ªãnh l·ªëi s·ªëng kh√¥ng thu·ªëc l√°\n‚Ä¢ M·ªü r·ªông m·∫°ng l∆∞·ªõi h·ªó tr·ª£ x√£ h·ªôi\n‚Ä¢ Theo d√µi v√† c·∫£i thi·ªán s·ª©c kh·ªèe tinh th·∫ßn\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch ph√≤ng ng·ª´a t√°i ph√°t\n‚Ä¢ Chia s·∫ª kinh nghi·ªám ƒë·ªÉ gi√∫p ng∆∞·ªùi kh√°c"
            }
        ];

        const templateText = templateData.map((phase, index) =>
            `${phase.phaseName}:\n${phase.phaseDescription}\n`
        ).join('\n');

        form.setFieldsValue({
            detailedPlan: templateText
        });

        message.success('ƒê√£ √°p d·ª•ng k·∫ø ho·∫°ch m·∫´u Premium Plan v√†o form! üéØ');
    };

    const handleSubmit = async (values) => {
        try {
            setSubmitting(true);

            console.log('üìù Form values received:', values);

            // Safe date conversion function
            const formatDate = (dateValue) => {
                try {
                    if (!dateValue) return null;

                    console.log('üóìÔ∏è Converting date:', dateValue, 'Type:', typeof dateValue);

                    // Handle different date formats from Ant Design DatePicker
                    let date;
                    if (dateValue._isAMomentObject || dateValue.format) {
                        // Moment object
                        console.log('üìÖ Detected Moment object');
                        date = dateValue.toDate();
                    } else if (dateValue.$d) {
                        // Day.js object  
                        console.log('üìÖ Detected Day.js object');
                        date = new Date(dateValue.$d);
                    } else if (dateValue instanceof Date) {
                        // Already a Date object
                        console.log('üìÖ Already a Date object');
                        date = dateValue;
                    } else {
                        // Try to parse as string
                        console.log('üìÖ Parsing as string/unknown format');
                        date = new Date(dateValue);
                    }

                    // Validate date
                    if (isNaN(date.getTime())) {
                        throw new Error(`Invalid date value: ${dateValue}`);
                    }

                    const formatted = format(date, 'yyyy-MM-dd');
                    console.log('‚úÖ Formatted date:', formatted);
                    return formatted;
                } catch (error) {
                    console.error('‚ùå Error formatting date:', error);
                    throw new Error(`Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi ng√†y: ${error.message}`);
                }
            };

            const submitData = {
                startDate: formatDate(values.startDate),
                targetDate: formatDate(values.targetDate),
                reason: values.reason,
                motivationLevel: values.motivationLevel,
                detailedPlan: values.detailedPlan || ''
            };

            console.log('üì§ Submitting quit plan:', submitData);

            // Validate required fields
            if (!submitData.startDate || !submitData.targetDate) {
                message.error('Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y m·ª•c ti√™u');
                setSubmitting(false);
                return;
            }

            // Validate date logic
            const startDate = new Date(submitData.startDate);
            const targetDate = new Date(submitData.targetDate);
            if (targetDate <= startDate) {
                message.error('Ng√†y m·ª•c ti√™u ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu');
                setSubmitting(false);
                return;
            }

            const response = await api.post('/api/quit-plan', submitData);
            console.log('‚úÖ Submit response:', response);

            message.success('K·∫ø ho·∫°ch cai thu·ªëc ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');

            // Reload data to show new plan
            const updatedPlans = await api.get('/api/quit-plan');
            setExistingPlans(updatedPlans.data.data || []);

            // Mark that a plan was just created successfully
            setJustCreatedPlan(true);

            // Switch to progress tab after creating plan and show encouraging message
            setActiveTab('progress');

            // Show encouraging notification
            setTimeout(() => {
                notification.success({
                    message: 'üéâ K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c t·∫°o!',
                    description: 'B√¢y gi·ªù h√£y b·∫Øt ƒë·∫ßu ghi nh·∫≠t k√Ω ti·∫øn tr√¨nh h√†ng ng√†y ƒë·ªÉ Coach c√≥ th·ªÉ theo d√µi v√† h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t.',
                    duration: 6,
                    placement: 'topRight'
                });
            }, 1000);

            setSubmitting(false);
        } catch (error) {
            console.error('‚ùå Error submitting quit plan:', error);
            message.error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i sau.');
            setSubmitting(false);
        }
    };

    const getStatusColor = (status) => {
        switch (status) {
            case 'active': return 'green';
            case 'completed': return 'blue';
            case 'cancelled': return 'red';
            default: return 'default';
        }
    };

    const getStatusText = (status) => {
        switch (status) {
            case 'active': return 'ƒêang th·ª±c hi·ªán';
            case 'completed': return 'Ho√†n th√†nh';
            case 'cancelled': return 'ƒê√£ h·ªßy';
            default: return 'Kh√¥ng x√°c ƒë·ªãnh';
        }
    };

    const calculateDaysToTarget = (targetDate) => {
        const target = parseISO(targetDate);
        const today = new Date();
        return differenceInDays(target, today);
    };

    const handleRetry = () => {
        window.location.reload();
    };

    const handleTestLogin = async () => {
        try {
            console.log('üîë Testing login...');
            const response = await api.post('/api/test-login', {
                email: 'leghenkiz@gmail.com',
                password: 'H12345678@'
            });

            if (response.data?.success && response.data?.token) {
                localStorage.setItem('token', response.data.token);
                console.log('‚úÖ Test login successful');
                message.success('ƒêƒÉng nh·∫≠p th√†nh c√¥ng! ƒêang t·∫£i l·∫°i trang...');
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        } catch (error) {
            console.error('‚ùå Test login failed:', error);
            message.error('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ' + (error.response?.data?.message || error.message));
        }
    };

    // Progress Logs Component
    const ProgressLogs = ({ hasAccess, existingPlans, setActiveTab }) => {
        const [progressForm] = Form.useForm();
        const [loadingProgress, setLoadingProgress] = useState(false);
        const [submittingProgress, setSubmittingProgress] = useState(false);
        const [todayProgress, setTodayProgress] = useState(null);
        const [progressSummary, setSummary] = useState(null);
        const [progressAdvice, setAdvice] = useState(null);
        const [progressSavings, setSavings] = useState(null);
        const [streakInfo, setStreakInfo] = useState(null);
        const [recentProgress, setRecentProgress] = useState([]);

        useEffect(() => {
            if (hasAccess) {
                loadProgressData();
            }
        }, [hasAccess]);

        const loadProgressData = async () => {
            try {
                setLoadingProgress(true);

                // Load all progress data - Use summary instead of savings for consistency
                const [todayRes, summaryRes, adviceRes, streakRes, recentRes] = await Promise.all([
                    api.get('/api/progress/today').catch(e => ({ data: { success: false } })),
                    api.get('/api/progress/summary').catch(e => ({ data: { success: false } })),
                    api.get('/api/progress/advice').catch(e => ({ data: { success: false } })),
                    api.get('/api/progress/streak').catch(e => ({ data: { success: false } })),
                    api.get('/api/progress/range?startDate=' + dayjs().subtract(7, 'days').format('YYYY-MM-DD') + '&endDate=' + dayjs().format('YYYY-MM-DD')).catch(e => ({ data: { success: false } }))
                ]);

                if (todayRes.data.success) {
                    setTodayProgress(todayRes.data.data);
                    if (todayRes.data.data) {
                        progressForm.setFieldsValue({
                            cigarettesSmoked: todayRes.data.data.CigarettesSmoked,
                            cravingLevel: todayRes.data.data.CravingLevel,
                            emotionNotes: todayRes.data.data.EmotionNotes
                        });
                    }
                }

                if (summaryRes.data.success) {
                    setSummary(summaryRes.data.data);
                    // Use summary data for savings too - this ensures consistency
                    setSavings({
                        totalMoneySaved: summaryRes.data.data.TotalMoneySaved || 0,
                        cigarettesNotSmoked: summaryRes.data.data.CigarettesNotSmoked || 0,
                        daysTracked: summaryRes.data.data.TotalDaysTracked || 0,
                        dailyAverageSavings: summaryRes.data.data.TotalDaysTracked > 0 ?
                            (summaryRes.data.data.TotalMoneySaved || 0) / summaryRes.data.data.TotalDaysTracked : 0
                    });
                }
                if (adviceRes.data.success) setAdvice(adviceRes.data);
                if (streakRes.data.success) setStreakInfo(streakRes.data.data);
                if (recentRes.data.success) setRecentProgress(recentRes.data.data);

            } catch (error) {
                console.error('Error loading progress data:', error);
                message.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ti·∫øn tr√¨nh');
            } finally {
                setLoadingProgress(false);
            }
        };

        const handleProgressSubmit = async (values) => {
            try {
                setSubmittingProgress(true);
                const today = dayjs().format('YYYY-MM-DD');

                const response = await api.post('/api/progress', {
                    date: today,
                    cigarettesSmoked: values.cigarettesSmoked,
                    cravingLevel: values.cravingLevel,
                    emotionNotes: values.emotionNotes || ''
                });

                if (response.data.success) {
                    message.success('ƒê√£ ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay th√†nh c√¥ng!');

                    // Show calculations
                    const { calculations } = response.data;
                    if (calculations) {
                        notification.success({
                            message: 'Ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u',
                            description: `Ti·ªÅn ti·∫øt ki·ªám h√¥m nay: ${calculations.moneySaved?.toLocaleString() || 0} VND. T·ªïng ng√†y kh√¥ng h√∫t: ${calculations.daysSmokeFree || 0} ng√†y.`,
                            duration: 5
                        });
                    }

                    // Reload data
                    await loadProgressData();
                }
            } catch (error) {
                console.error('Error submitting progress:', error);
                if (error.response?.status === 403) {
                    message.error(error.response.data.message || 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√≠nh nƒÉng n√†y');
                } else {
                    message.error('C√≥ l·ªói x·∫£y ra khi ghi nh·∫≠n ti·∫øn tr√¨nh');
                }
            } finally {
                setSubmittingProgress(false);
            }
        };

        if (!hasAccess) {
            return (
                <Card>
                    <div className="text-center py-8">
                        <ExclamationCircleOutlined className="text-4xl text-orange-500 mb-4" />
                        <Title level={4}>Ch∆∞a c√≥ quy·ªÅn truy c·∫≠p</Title>
                        <Text>B·∫°n c·∫ßn c√≥ g√≥i d·ªãch v·ª• ƒë∆∞·ª£c x√°c nh·∫≠n ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng ghi nh·∫≠t k√Ω ti·∫øn tr√¨nh.</Text>
                    </div>
                </Card>
            );
        }

        if (loadingProgress) {
            return (
                <Card>
                    <div className="text-center py-8">
                        <Spin size="large" tip="ƒêang t·∫£i d·ªØ li·ªáu ti·∫øn tr√¨nh..." />
                    </div>
                </Card>
            );
        }

        return (
            <div className="space-y-6">
                {/* Th√¥ng b√°o h∆∞·ªõng d·∫´n n·∫øu ch∆∞a c√≥ k·∫ø ho·∫°ch */}
                {(!existingPlans || existingPlans.length === 0) && (
                    <Alert
                        message="üéØ B·∫°n ch∆∞a c√≥ k·∫ø ho·∫°ch cai thu·ªëc!"
                        description={
                            <div>
                                <Text>
                                    ƒê·ªÉ theo d√µi ti·∫øn tr√¨nh hi·ªáu qu·∫£, b·∫°n n√™n t·∫°o k·∫ø ho·∫°ch cai thu·ªëc tr∆∞·ªõc.
                                    H√£y chuy·ªÉn sang tab{' '}
                                    <Text strong className="text-green-600">&quot;K·∫ø ho·∫°ch&quot;</Text>{' '}
                                    ƒë·ªÉ thi·∫øt l·∫≠p m·ª•c ti√™u v√† l·ªô tr√¨nh chi ti·∫øt.
                                </Text>
                                <div className="mt-2">
                                    <Button
                                        type="link"
                                        size="small"
                                        icon={<PlusOutlined />}
                                        onClick={() => setActiveTab('plan')}
                                        className="p-0 h-auto"
                                    >
                                        T·∫°o k·∫ø ho·∫°ch cai thu·ªëc ‚Üí
                                    </Button>
                                </div>
                            </div>
                        }
                        type="warning"
                        showIcon
                        className="mb-4"
                        style={{
                            borderColor: '#faad14',
                            backgroundColor: '#fffbe6'
                        }}
                    />
                )}

                {/* Today's Progress Entry */}
                <Card title={<><SaveOutlined className="mr-2" />Ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay</>}>
                    {todayProgress && (
                        <Alert
                            message="B·∫°n ƒë√£ ghi nh·∫≠n ti·∫øn tr√¨nh h√¥m nay"
                            description="B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t l·∫°i th√¥ng tin n·∫øu c·∫ßn."
                            type="info"
                            showIcon
                            className="mb-4"
                        />
                    )}

                    <Form
                        form={progressForm}
                        layout="vertical"
                        onFinish={handleProgressSubmit}
                        className="max-w-md"
                    >
                        <Form.Item
                            label="S·ªë ƒëi·∫øu h√∫t h√¥m nay"
                            name="cigarettesSmoked"
                            rules={[
                                { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·∫øu h√∫t' },
                                { type: 'number', min: 0, message: 'S·ªë ƒëi·∫øu kh√¥ng ƒë∆∞·ª£c √¢m' }
                            ]}
                        >
                            <InputNumber
                                min={0}
                                style={{ width: '100%' }}
                                placeholder="Nh·∫≠p s·ªë ƒëi·∫øu h√∫t h√¥m nay"
                                addonAfter="ƒëi·∫øu"
                            />
                        </Form.Item>

                        <Form.Item
                            label="M·ª©c ƒë·ªô th√®m thu·ªëc (1-10)"
                            name="cravingLevel"
                            rules={[
                                { required: true, message: 'Vui l√≤ng ƒë√°nh gi√° m·ª©c ƒë·ªô th√®m thu·ªëc' },
                                { type: 'number', min: 1, max: 10, message: 'M·ª©c ƒë·ªô ph·∫£i t·ª´ 1-10' }
                            ]}
                        >
                            <InputNumber
                                min={1}
                                max={10}
                                style={{ width: '100%' }}
                                placeholder="1 = r·∫•t th·∫•p, 10 = r·∫•t cao"
                            />
                        </Form.Item>

                        <Form.Item
                            label="Ghi ch√∫ c·∫£m x√∫c"
                            name="emotionNotes"
                        >
                            <TextArea
                                rows={3}
                                placeholder="M√¥ t·∫£ c·∫£m x√∫c, t√¨nh tr·∫°ng tinh th·∫ßn, c√°c t√¨nh hu·ªëng kh√≥ khƒÉn h√¥m nay..."
                            />
                        </Form.Item>

                        <Form.Item>
                            <Button
                                type="primary"
                                htmlType="submit"
                                loading={submittingProgress}
                                icon={<SaveOutlined />}
                                size="large"
                            >
                                Ghi nh·∫≠n ti·∫øn tr√¨nh
                            </Button>
                        </Form.Item>
                    </Form>
                </Card>

                {/* Progress Summary Cards */}
                <Row gutter={[16, 16]}>
                    <Col xs={24} sm={12} md={6}>
                        <Card className="text-center">
                            <FireOutlined className="text-2xl text-red-500 mb-2" />
                            <Statistic
                                title="Chu·ªói ng√†y kh√¥ng h√∫t"
                                value={streakInfo?.currentStreak || 0}
                                suffix="ng√†y"
                                valueStyle={{ color: '#f56a00' }}
                            />
                            <Text className="text-sm text-gray-500">
                                K·ª∑ l·ª•c: {streakInfo?.longestStreak || 0} ng√†y
                            </Text>
                        </Card>
                    </Col>

                    <Col xs={24} sm={12} md={6}>
                        <Card className="text-center">
                            <DollarOutlined className="text-2xl text-green-500 mb-2" />
                            <Statistic
                                title="Ti·ªÅn ti·∫øt ki·ªám"
                                value={progressSavings?.totalMoneySaved || 0}
                                suffix="VND"
                                valueStyle={{ color: '#52c41a' }}
                            />
                            <Text className="text-sm text-gray-500">
                                {progressSavings?.cigarettesNotSmoked || 0} ƒëi·∫øu kh√¥ng h√∫t
                                {progressSummary?.TotalDaysTracked > 0 && (
                                    <span style={{ color: '#1890ff', fontWeight: 'bold' }}>
                                        {' '}(trong {progressSummary.TotalDaysTracked} ng√†y)
                                    </span>
                                )}
                            </Text>
                        </Card>
                    </Col>

                    <Col xs={24} sm={12} md={6}>
                        <Card className="text-center">
                            <TrophyOutlined className="text-2xl text-blue-500 mb-2" />
                            <Statistic
                                title="Ng√†y kh√¥ng h√∫t"
                                value={progressSummary?.SmokeFreeDays || 0}
                                suffix={`/ ${progressSummary?.TotalDaysTracked || 0}`}
                                valueStyle={{ color: '#1890ff' }}
                            />
                            <Progress
                                percent={progressSummary?.SmokeFreePercentage || 0}
                                size="small"
                                showInfo={false}
                            />
                        </Card>
                    </Col>

                    <Col xs={24} sm={12} md={6}>
                        <Card className="text-center">
                            <SmileOutlined className="text-2xl text-purple-500 mb-2" />
                            <Statistic
                                title="M·ª©c th√®m trung b√¨nh"
                                value={progressSummary?.AverageCravingLevel || 0}
                                suffix="/ 10"
                                precision={1}
                                valueStyle={{ color: '#722ed1' }}
                            />
                            <Text className="text-sm text-gray-500">
                                {progressSummary?.TotalDaysTracked || 0} ng√†y theo d√µi
                            </Text>
                        </Card>
                    </Col>
                </Row>

                {/* Advice Card */}
                {progressAdvice && (
                    <Card title={<><BulbOutlined className="mr-2" />L·ªùi khuy√™n d√†nh cho b·∫°n</>}>
                        <Alert
                            message={progressAdvice.advice}
                            type={progressAdvice.type === 'excellent' ? 'success' :
                                progressAdvice.type === 'craving' ? 'warning' : 'info'}
                            showIcon
                            className="mb-4"
                        />
                        {progressAdvice.basedOn && (
                            <Text className="text-sm text-gray-500">
                                D·ª±a tr√™n: {progressAdvice.basedOn.cigarettesSmoked} ƒëi·∫øu h√∫t,
                                m·ª©c th√®m {progressAdvice.basedOn.cravingLevel}/10
                                {progressAdvice.logDate && ` - ${format(parseISO(progressAdvice.logDate), 'dd/MM/yyyy')}`}
                            </Text>
                        )}
                    </Card>
                )}

                {/* Recent Progress */}
                <Card title={<><LineChartOutlined className="mr-2" />Ti·∫øn tr√¨nh 7 ng√†y g·∫ßn ƒë√¢y</>}>
                    {recentProgress.length === 0 ? (
                        <div className="text-center py-8">
                            <Text className="text-gray-500">Ch∆∞a c√≥ d·ªØ li·ªáu ti·∫øn tr√¨nh</Text>
                        </div>
                    ) : (
                        <List
                            dataSource={recentProgress}
                            renderItem={(item) => (
                                <List.Item>
                                    <Card size="small" className="w-full">
                                        <div className="flex justify-between items-start">
                                            <div>
                                                <Text strong>{format(parseISO(item.Date), 'dd/MM/yyyy')}</Text>
                                                <br />
                                                <Space>
                                                    <Tag color={item.CigarettesSmoked === 0 ? 'green' : 'orange'}>
                                                        {item.CigarettesSmoked} ƒëi·∫øu
                                                    </Tag>
                                                    <Tag color="blue">
                                                        Th√®m: {item.CravingLevel}/10
                                                    </Tag>
                                                    {item.MoneySaved > 0 && (
                                                        <Tag color="gold">
                                                            +{item.MoneySaved?.toLocaleString()} VND
                                                        </Tag>
                                                    )}
                                                </Space>
                                            </div>
                                            {item.CigarettesSmoked === 0 && (
                                                <CheckCircleOutlined className="text-green-500 text-lg" />
                                            )}
                                        </div>
                                        {item.EmotionNotes && (
                                            <Paragraph className="mt-2 mb-0 text-sm" ellipsis={{ rows: 2 }}>
                                                <em>"{item.EmotionNotes}"</em>
                                            </Paragraph>
                                        )}
                                    </Card>
                                </List.Item>
                            )}
                        />
                    )}
                </Card>
            </div>
        );
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <Spin size="large" tip="ƒêang t·∫£i th√¥ng tin k·∫ø ho·∫°ch..." />
            </div>
        );
    }

    if (error || !hasAccess) {
        return (
            <div className="container mx-auto py-8 px-4">
                <Card className="shadow-lg rounded-lg max-w-2xl mx-auto">
                    <div className="text-center">
                        <ExclamationCircleOutlined className="text-4xl text-red-500 mb-4" />
                        <Title level={3}>Kh√¥ng th·ªÉ truy c·∫≠p</Title>

                        {error && (
                            <Alert
                                message="L·ªói truy c·∫≠p"
                                description={error}
                                type="error"
                                showIcon
                                className="mb-4"
                            />
                        )}

                        <Paragraph className="text-gray-600 mb-6">
                            ƒê·ªÉ truy c·∫≠p t√≠nh nƒÉng "L·∫≠p k·∫ø ho·∫°ch cai thu·ªëc", b·∫°n c·∫ßn:
                        </Paragraph>

                        <div className="text-left bg-gray-50 p-4 rounded-lg mb-6">
                            <ul className="list-disc list-inside space-y-2">
                                <li>ƒê√£ ƒëƒÉng k√Ω v√† <strong>thanh to√°n g√≥i d·ªãch v·ª•</strong> ƒë∆∞·ª£c x√°c nh·∫≠n</li>
                                <li>Ho·∫∑c c√≥ role <strong>Coach/Admin</strong></li>
                            </ul>
                        </div>

                        <Space>
                            <Button type="primary" onClick={handleRetry}>
                                Th·ª≠ l·∫°i
                            </Button>
                            <Button type="default" onClick={handleTestLogin}>
                                Test Login
                            </Button>
                            <Button onClick={() => window.location.href = '/membership'}>
                                Xem g√≥i d·ªãch v·ª•
                            </Button>
                        </Space>
                    </div>
                </Card>
            </div>
        );
    }

    return (
        <div className="container mx-auto py-8 px-4">
            <div className="max-w-6xl mx-auto">
                <Card className="shadow-lg rounded-lg mb-6">
                    <div className="text-center mb-8">
                        <BulbOutlined className="text-4xl text-blue-500 mb-4" />
                        <Title level={2}>L·∫≠p K·∫ø Ho·∫°ch Cai Thu·ªëc</Title>
                        <Paragraph className="text-gray-600 text-lg">
                            T·∫°o m·ªôt k·∫ø ho·∫°ch chi ti·∫øt ƒë·ªÉ h·ªó tr·ª£ h√†nh tr√¨nh cai thu·ªëc c·ªßa b·∫°n
                        </Paragraph>

                        {paymentInfo && (
                            <div className="bg-green-50 p-4 rounded-lg mt-4">
                                <Text className="text-green-700">
                                    üéâ B·∫°n ƒë√£ ƒëƒÉng k√Ω g√≥i <strong>{paymentInfo.PlanName}</strong> th√†nh c√¥ng!
                                    H√£y t·∫≠n d·ª•ng k·∫ø ho·∫°ch m·∫´u chuy√™n nghi·ªáp b√™n d∆∞·ªõi.
                                </Text>
                            </div>
                        )}
                    </div>

                    <Tabs
                        activeKey={activeTab}
                        onChange={(key) => {
                            setActiveTab(key);
                            // Reset justCreatedPlan when switching tabs
                            if (key !== 'plan') {
                                setJustCreatedPlan(false);
                            }
                        }}
                        type="card"
                        size="large"
                        className="custom-tabs"
                    >
                        <TabPane
                            tab={
                                <span>
                                    <PlusOutlined />
                                    K·∫ø ho·∫°ch
                                    {existingPlans.length > 0 && (
                                        <Badge
                                            count={existingPlans.length}
                                            size="small"
                                            style={{ marginLeft: 8 }}
                                        />
                                    )}
                                </span>
                            }
                            key="plan"
                        >
                            <Row gutter={[24, 24]}>
                                {/* Form t·∫°o k·∫ø ho·∫°ch */}
                                <Col xs={24} lg={14}>
                                    <Card title={<><PlusOutlined /> T·∫°o k·∫ø ho·∫°ch m·ªõi</>} className="h-full">
                                        {planTemplate && planTemplate.length > 0 && (
                                            <div className="mb-4 p-4 bg-blue-50 rounded-lg">
                                                <div className="flex justify-between items-center">
                                                    <div>
                                                        <Text strong>K·∫ø ho·∫°ch m·∫´u cho g√≥i {paymentInfo?.PlanName}</Text>
                                                        <br />
                                                        <Text className="text-sm text-gray-600">
                                                            {planTemplate.length} giai ƒëo·∫°n chi ti·∫øt
                                                        </Text>
                                                    </div>
                                                    <Button
                                                        type="primary"
                                                        size="small"
                                                        onClick={handleUseTemplate}
                                                    >
                                                        √Åp d·ª•ng m·∫´u
                                                    </Button>
                                                </div>
                                            </div>
                                        )}

                                        <Form
                                            form={form}
                                            layout="vertical"
                                            onFinish={handleSubmit}
                                            onFinishFailed={(errorInfo) => {
                                                console.error('‚ùå Form validation failed:', errorInfo);
                                                message.error('Vui l√≤ng ki·ªÉm tra v√† ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
                                            }}
                                            className="space-y-4"
                                        >
                                            <Row gutter={16}>
                                                <Col xs={24} sm={12}>
                                                    <Form.Item
                                                        label={
                                                            <span>
                                                                <CalendarOutlined className="mr-2" />
                                                                Ng√†y b·∫Øt ƒë·∫ßu
                                                            </span>
                                                        }
                                                        name="startDate"
                                                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu' }]}
                                                    >
                                                        <DatePicker
                                                            style={{ width: '100%' }}
                                                            placeholder="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu"
                                                            format="DD/MM/YYYY"
                                                            disabledDate={(current) => {
                                                                // Disable dates before today
                                                                return current && current < dayjs().startOf('day');
                                                            }}
                                                        />
                                                    </Form.Item>
                                                </Col>

                                                <Col xs={24} sm={12}>
                                                    <Form.Item
                                                        label={
                                                            <span>
                                                                <CalendarOutlined className="mr-2" />
                                                                Ng√†y m·ª•c ti√™u cai ho√†n to√†n
                                                            </span>
                                                        }
                                                        name="targetDate"
                                                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y m·ª•c ti√™u' }]}
                                                    >
                                                        <DatePicker
                                                            style={{ width: '100%' }}
                                                            placeholder="Ch·ªçn ng√†y m·ª•c ti√™u"
                                                            format="DD/MM/YYYY"
                                                            disabledDate={(current) => {
                                                                // Get start date from form
                                                                const startDate = form.getFieldValue('startDate');
                                                                if (startDate) {
                                                                    // Disable dates before or equal to start date
                                                                    return current && current <= dayjs(startDate).startOf('day');
                                                                }
                                                                // If no start date, disable dates before today
                                                                return current && current < dayjs().startOf('day');
                                                            }}
                                                        />
                                                    </Form.Item>
                                                </Col>
                                            </Row>

                                            <Form.Item
                                                label={
                                                    <span>
                                                        <HeartOutlined className="mr-2" />
                                                        L√Ω do b·ªè thu·ªëc
                                                    </span>
                                                }
                                                name="reason"
                                                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l√Ω do b·ªè thu·ªëc' }]}
                                            >
                                                <TextArea
                                                    rows={3}
                                                    placeholder="Chia s·∫ª l√Ω do t·∫°i sao b·∫°n mu·ªën b·ªè thu·ªëc (v√≠ d·ª•: v√¨ s·ª©c kh·ªèe, gia ƒë√¨nh, ti·∫øt ki·ªám ti·ªÅn...)"
                                                />
                                            </Form.Item>

                                            <Form.Item
                                                label="M·ª©c ƒë·ªô ƒë·ªông l·ª±c (1-10)"
                                                name="motivationLevel"
                                                rules={[
                                                    { required: true, message: 'Vui l√≤ng ƒë√°nh gi√° m·ª©c ƒë·ªô ƒë·ªông l·ª±c' },
                                                    { type: 'number', min: 1, max: 10, message: 'M·ª©c ƒë·ªô ƒë·ªông l·ª±c ph·∫£i t·ª´ 1 ƒë·∫øn 10' }
                                                ]}
                                            >
                                                <InputNumber
                                                    min={1}
                                                    max={10}
                                                    style={{ width: '100%' }}
                                                    placeholder="ƒê√°nh gi√° m·ª©c ƒë·ªô quy·∫øt t√¢m c·ªßa b·∫°n (1: th·∫•p, 10: r·∫•t cao)"
                                                />
                                            </Form.Item>

                                            <Form.Item
                                                label="K·∫ø ho·∫°ch chi ti·∫øt t·ª´ng giai ƒëo·∫°n"
                                                name="detailedPlan"
                                            >
                                                <TextArea
                                                    rows={8}
                                                    placeholder="M√¥ t·∫£ chi ti·∫øt k·∫ø ho·∫°ch t·ª´ng giai ƒëo·∫°n, c√°c ho·∫°t ƒë·ªông thay th·∫ø, c√°ch ƒë·ªëi ph√≥ v·ªõi c∆°n th√®m... (C√≥ th·ªÉ s·ª≠ d·ª•ng k·∫ø ho·∫°ch m·∫´u ·ªü tr√™n)"
                                                />
                                            </Form.Item>

                                            <Form.Item>
                                                <Button
                                                    type="primary"
                                                    htmlType="submit"
                                                    size="large"
                                                    loading={submitting}
                                                    block
                                                >
                                                    T·∫°o K·∫ø Ho·∫°ch Cai Thu·ªëc
                                                </Button>
                                            </Form.Item>
                                        </Form>

                                        {/* Th√¥ng b√°o hi·ªÉn th·ªã sau khi t·∫°o k·∫ø ho·∫°ch th√†nh c√¥ng */}
                                        {(justCreatedPlan || (existingPlans && existingPlans.length > 0)) && (
                                            <Alert
                                                message="üìã B∆∞·ªõc ti·∫øp theo quan tr·ªçng!"
                                                description={
                                                    <div>
                                                        <Text>
                                                            {justCreatedPlan ?
                                                                'K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! B√¢y gi·ªù h√£y chuy·ªÉn sang tab ' :
                                                                'H√£y chuy·ªÉn sang tab '
                                                            }
                                                            <Text strong className="text-blue-600">"Ti·∫øn tr√¨nh"</Text>{' '}
                                                            ƒë·ªÉ ghi nh·∫≠t k√Ω h√†ng ng√†y. ƒêi·ªÅu n√†y gi√∫p Coach theo d√µi v√† h·ªó tr·ª£ b·∫°n t·ªët h∆°n.
                                                        </Text>
                                                        <div className="mt-2">
                                                            <Button
                                                                type="link"
                                                                size="small"
                                                                icon={<BookOutlined />}
                                                                onClick={() => setActiveTab('progress')}
                                                                className="p-0 h-auto"
                                                            >
                                                                Chuy·ªÉn ƒë·∫øn tab Ti·∫øn tr√¨nh ‚Üí
                                                            </Button>
                                                        </div>
                                                    </div>
                                                }
                                                type={justCreatedPlan ? "success" : "info"}
                                                showIcon
                                                icon={<BulbOutlined />}
                                                className="mt-4"
                                                style={{
                                                    borderColor: justCreatedPlan ? '#52c41a' : '#1890ff',
                                                    backgroundColor: justCreatedPlan ? '#f6ffed' : '#f0f9ff'
                                                }}
                                            />
                                        )}
                                    </Card>
                                </Col>

                                {/* K·∫ø ho·∫°ch m·∫´u v√† danh s√°ch hi·ªán c√≥ */}
                                <Col xs={24} lg={10}>
                                    {/* üß™ TEST TEMPLATE SECTION - Always show for testing */}
                                    <Card title="üéØ K·∫ø ho·∫°ch m·∫´u - Premium Plan" className="mb-4" style={{ border: '2px solid #52c41a' }}>
                                        <div className="mb-4 p-3 bg-blue-50 rounded-lg">
                                            <div className="flex justify-between items-center">
                                                <div>
                                                    <Text strong className="text-blue-700">
                                                        üèÜ K·∫ø ho·∫°ch chuy√™n nghi·ªáp 8 tu·∫ßn
                                                    </Text>
                                                    <br />
                                                    <Text className="text-sm text-gray-600">
                                                        4 giai ƒëo·∫°n chi ti·∫øt ƒë∆∞·ª£c thi·∫øt k·∫ø b·ªüi chuy√™n gia
                                                    </Text>
                                                </div>
                                                <Button
                                                    type="primary"
                                                    size="small"
                                                    onClick={handleUseTemplate}
                                                    icon={<BulbOutlined />}
                                                >
                                                    √Åp d·ª•ng
                                                </Button>
                                            </div>
                                        </div>

                                        <List
                                            dataSource={[
                                                {
                                                    phaseName: "Tu·∫ßn 1-2: Detox v√† chu·∫©n b·ªã",
                                                    phaseDescription: "‚Ä¢ Th·ª±c hi·ªán detox c∆° th·ªÉ v·ªõi ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh\n‚Ä¢ B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh t·∫≠p luy·ªán th·ªÉ ch·∫•t\n‚Ä¢ Thi·∫øt l·∫≠p h·ªá th·ªëng h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®\n‚Ä¢ H·ªçc c√°c k·ªπ thu·∫≠t th∆∞ gi√£n: thi·ªÅn, yoga\n‚Ä¢ Ghi ch√©p chi ti·∫øt v·ªÅ triggers v√† c√°ch ƒë·ªëi ph√≥",
                                                    durationDays: 14
                                                },
                                                {
                                                    phaseName: "Tu·∫ßn 3-4: X√¢y d·ª±ng th√≥i quen m·ªõi",
                                                    phaseDescription: "‚Ä¢ Ph√°t tri·ªÉn hobby m·ªõi ƒë·ªÉ thay th·∫ø th·ªùi gian h√∫t thu·ªëc\n‚Ä¢ Tham gia c√°c nh√≥m h·ªó tr·ª£ tr·ª±c tuy·∫øn/offline\n‚Ä¢ √Åp d·ª•ng k·ªπ thu·∫≠t CBT (Cognitive Behavioral Therapy)\n‚Ä¢ Theo d√µi c·∫£i thi·ªán s·ª©c kh·ªèe: huy·∫øt √°p, nh·ªãp tim\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh t·ª´ ti·ªÅn ti·∫øt ki·ªám",
                                                    durationDays: 14
                                                },
                                                {
                                                    phaseName: "Tu·∫ßn 5-6: ƒê·ªëi ph√≥ v·ªõi kh√≥ khƒÉn",
                                                    phaseDescription: "‚Ä¢ Nh·∫≠n di·ªán v√† x·ª≠ l√Ω c√°c t√¨nh hu·ªëng nguy hi·ªÉm\n‚Ä¢ Ph√°t tri·ªÉn k·ªπ nƒÉng qu·∫£n l√Ω stress n√¢ng cao\n‚Ä¢ T·∫°o ƒë·ªông l·ª±c d√†i h·∫°n v·ªõi m·ª•c ti√™u c·ª• th·ªÉ\n‚Ä¢ ƒê√°nh gi√° ti·∫øn b·ªô v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch\n‚Ä¢ Chu·∫©n b·ªã t√¢m l√Ω cho giai ƒëo·∫°n duy tr√¨",
                                                    durationDays: 14
                                                },
                                                {
                                                    phaseName: "Tu·∫ßn 7-8: Duy tr√¨ v√† ph√°t tri·ªÉn",
                                                    phaseDescription: "‚Ä¢ ·ªîn ƒë·ªãnh l·ªëi s·ªëng kh√¥ng thu·ªëc l√°\n‚Ä¢ M·ªü r·ªông m·∫°ng l∆∞·ªõi h·ªó tr·ª£ x√£ h·ªôi\n‚Ä¢ Theo d√µi v√† c·∫£i thi·ªán s·ª©c kh·ªèe tinh th·∫ßn\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch ph√≤ng ng·ª´a t√°i ph√°t\n‚Ä¢ Chia s·∫ª kinh nghi·ªám ƒë·ªÉ gi√∫p ng∆∞·ªùi kh√°c",
                                                    durationDays: 14
                                                }
                                            ]}
                                            renderItem={(phase, index) => (
                                                <List.Item>
                                                    <Card size="small" className="w-full shadow-sm hover:shadow-md transition-shadow">
                                                        <div className="flex items-start space-x-3">
                                                            <div className="flex-shrink-0">
                                                                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                                                    <span className="text-blue-600 font-semibold text-sm">
                                                                        {index + 1}
                                                                    </span>
                                                                </div>
                                                            </div>
                                                            <div className="flex-1">
                                                                <Title level={5} className="mb-2 text-blue-700">
                                                                    {phase.phaseName}
                                                                </Title>
                                                                <Paragraph className="mb-3 whitespace-pre-line text-sm text-gray-700">
                                                                    {phase.phaseDescription}
                                                                </Paragraph>
                                                                <div className="flex justify-between items-center">
                                                                    <Tag color="blue" className="font-medium">
                                                                        üìÖ {phase.durationDays} ng√†y
                                                                    </Tag>
                                                                    <Tag color="green" className="text-xs">
                                                                        Giai ƒëo·∫°n {index + 1}
                                                                    </Tag>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </Card>
                                                </List.Item>
                                            )}
                                        />
                                    </Card>

                                    {/* Original template logic for comparison */}
                                    {console.log('üîç DEBUG - planTemplate state:', planTemplate)}

                                    {/* Hi·ªÉn th·ªã k·∫ø ho·∫°ch m·∫´u t·ª´ API */}
                                    {planTemplate && planTemplate.length > 0 && (
                                        <Card title={`üîÑ API Templates - ${paymentInfo?.PlanName}`} className="mb-4" style={{ border: '2px solid #1890ff' }}>
                                            <Text className="text-sm text-blue-600 mb-3 block">
                                                ƒê√¢y l√† templates t·ª´ API (n·∫øu c√≥)
                                            </Text>
                                            <List
                                                dataSource={planTemplate}
                                                renderItem={(phase, index) => (
                                                    <List.Item>
                                                        <Card size="small" className="w-full">
                                                            <Title level={5} className="mb-2">
                                                                {phase.PhaseName || phase.phaseName}
                                                            </Title>
                                                            <Paragraph className="mb-0 whitespace-pre-line text-sm">
                                                                {phase.PhaseDescription || phase.phaseDescription}
                                                            </Paragraph>
                                                            <div className="mt-2">
                                                                <Tag color="blue">
                                                                    {phase.DurationDays || phase.durationDays} ng√†y
                                                                </Tag>
                                                            </div>
                                                        </Card>
                                                    </List.Item>
                                                )}
                                            />
                                        </Card>
                                    )}

                                    {/* Danh s√°ch k·∫ø ho·∫°ch hi·ªán c√≥ */}
                                    <Card title="K·∫ø ho·∫°ch c·ªßa b·∫°n" className="h-full">
                                        {existingPlans.length === 0 ? (
                                            <div className="text-center py-8">
                                                <ExclamationCircleOutlined className="text-2xl text-gray-400 mb-2" />
                                                <Text className="text-gray-500">
                                                    B·∫°n ch∆∞a c√≥ k·∫ø ho·∫°ch cai thu·ªëc n√†o
                                                </Text>
                                            </div>
                                        ) : (
                                            <List
                                                dataSource={existingPlans}
                                                renderItem={(plan) => {
                                                    const daysToTarget = calculateDaysToTarget(plan.TargetDate);
                                                    return (
                                                        <List.Item>
                                                            <Card className="w-full" size="small">
                                                                <div className="flex justify-between items-start mb-2">
                                                                    <Tag color={getStatusColor(plan.Status)}>
                                                                        {getStatusText(plan.Status)}
                                                                    </Tag>
                                                                    <Text className="text-sm text-gray-500">
                                                                        {format(parseISO(plan.CreatedAt), 'dd/MM/yyyy')}
                                                                    </Text>
                                                                </div>

                                                                <div className="space-y-2">
                                                                    <div>
                                                                        <Text strong>Ng√†y b·∫Øt ƒë·∫ßu: </Text>
                                                                        <Text>{format(parseISO(plan.StartDate), 'dd/MM/yyyy')}</Text>
                                                                    </div>

                                                                    <div>
                                                                        <Text strong>Ng√†y m·ª•c ti√™u: </Text>
                                                                        <Text>{format(parseISO(plan.TargetDate), 'dd/MM/yyyy')}</Text>
                                                                        {plan.Status === 'active' && (
                                                                            <Text className="ml-2 text-sm">
                                                                                ({daysToTarget > 0 ? `c√≤n ${daysToTarget} ng√†y` : 'ƒë√£ qua h·∫°n'})
                                                                            </Text>
                                                                        )}
                                                                    </div>

                                                                    <div>
                                                                        <Text strong>ƒê·ªông l·ª±c: </Text>
                                                                        <Text>{plan.MotivationLevel}/10</Text>
                                                                    </div>

                                                                    <div>
                                                                        <Text strong>L√Ω do: </Text>
                                                                        <Paragraph
                                                                            ellipsis={{ rows: 2, expandable: true, symbol: 'xem th√™m' }}
                                                                            className="mb-0"
                                                                        >
                                                                            {plan.Reason}
                                                                        </Paragraph>
                                                                    </div>

                                                                    {plan.DetailedPlan && (
                                                                        <div>
                                                                            <Text strong>K·∫ø ho·∫°ch chi ti·∫øt: </Text>
                                                                            <Paragraph
                                                                                ellipsis={{ rows: 2, expandable: true, symbol: 'xem th√™m' }}
                                                                                className="mb-0"
                                                                            >
                                                                                {plan.DetailedPlan}
                                                                            </Paragraph>
                                                                        </div>
                                                                    )}
                                                                </div>
                                                            </Card>
                                                        </List.Item>
                                                    );
                                                }}
                                            />
                                        )}
                                    </Card>
                                </Col>
                            </Row>
                        </TabPane>
                        <TabPane
                            tab={
                                <span>
                                    <BookOutlined />
                                    Ti·∫øn tr√¨nh
                                    {hasAccess && (
                                        <Badge
                                            status="processing"
                                            style={{ marginLeft: 8 }}
                                        />
                                    )}
                                </span>
                            }
                            key="progress"
                        >
                            <ProgressLogs hasAccess={hasAccess} existingPlans={existingPlans} setActiveTab={setActiveTab} />
                        </TabPane>

                    </Tabs>
                </Card>

                {/* Th√¥ng tin h∆∞·ªõng d·∫´n */}
                <Card className="shadow-lg rounded-lg">
                    <Title level={4}>
                        <CheckCircleOutlined className="mr-2 text-green-500" />
                        L∆∞u √Ω quan tr·ªçng
                    </Title>
                    <Row gutter={[16, 16]}>
                        <Col xs={24} md={8}>
                            <Card size="small" className="h-full bg-blue-50">
                                <Title level={5}>K·∫ø ho·∫°ch theo g√≥i</Title>
                                <Text>
                                    M·ªói g√≥i d·ªãch v·ª• c√≥ k·∫ø ho·∫°ch m·∫´u chuy√™n nghi·ªáp ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu qu·∫£ cai thu·ªëc.
                                </Text>
                            </Card>
                        </Col>

                        <Col xs={24} md={8}>
                            <Card size="small" className="h-full bg-green-50">
                                <Title level={5}>T√≠nh nƒÉng Coach</Title>
                                <Text>
                                    C√°c coach s·∫Ω c√≥ th·ªÉ can thi·ªáp v√† ch·ªânh s·ª≠a k·∫ø ho·∫°ch chi ti·∫øt ƒë·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n.
                                </Text>
                            </Card>
                        </Col>

                        <Col xs={24} md={8}>
                            <Card size="small" className="h-full bg-yellow-50">
                                <Title level={5}>Theo d√µi ti·∫øn tr√¨nh</Title>
                                <Text>
                                    H√£y th∆∞·ªùng xuy√™n c·∫≠p nh·∫≠t ti·∫øn tr√¨nh v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch ph√π h·ª£p v·ªõi t√¨nh h√¨nh th·ª±c t·∫ø.
                                </Text>
                            </Card>
                        </Col>
                    </Row>
                </Card>
            </div>
        </div>
    );
};

export default QuitPlanPage; 